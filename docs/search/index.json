[{"content":" # MOD_FIFO freeswitch mod_fifo 是一个做做排队的app，允许您使用分配的优先级创建自定义的呼叫队列。\n在使用mod_fifo时，一般是caller(profile external的incoming channel/outgoing channel)执行app命中坐席的过程。\n坐席定义了两种(consumer和member):\nconsumer是坐席先呼入，被应答，登入队列保持等待。consumer等待caller提供通道服务。 member是在配置fifo.conf.xml中定义或fifo_member动态增减。member等待caller。 # 用法 fifo app 在caller channel 执行。\n1 2 3 4 5 6 7 \u0026lt;fifo name\u0026gt;[!\u0026lt;importance_number\u0026gt;] [in [\u0026lt;announce file\u0026gt;|undef] [\u0026lt;music file\u0026gt;|undef] | out [wait|nowait] [\u0026lt;announce file\u0026gt;|undef] [\u0026lt;music file\u0026gt;|undef]] //dialplan take a caller out of FIFO queue. \u0026lt;action application=\u0026#34;fifo\u0026#34; data=\u0026#34;myqueue out nowait /tmp/caller-found.wav /tmp/agent-music-on-hold.wav\u0026#34;/\u0026gt; //dialplan put a caller into a FIFO queue. \u0026lt;action application=\u0026#34;fifo\u0026#34; data=\u0026#34;myqueue in /tmp/exit-message.wav /tmp/music-on-hold.wav\u0026#34;/\u0026gt; ","date":"2023-07-06T16:50:58+08:00","permalink":"https://tsinling.org/p/freeswitch-mod_fifo/","title":"Freeswitch Mod_fifo"},{"content":"陕西历史博物馆参观需要提前预约门票。\n关注微信公众号“陕西历史博物馆”，进入公众号对话页面。右下角就是预约入口。\n从预约入口进入美团门票陕西历史博物馆预约，先阅读一下温馨提示，点同意并预定就来到了抢票界面。\n为了在每天10:00，11:00，18:00，19:00整点能抢到预约门票：\n尽量使用计算机登入微信抢票 。 提前填写手机号码和身份证（在抢票界面只要有票先进去把游客信息填写完整）。 抢票界面显示已约满时，后退到温馨提示，点同意并预定重新进抢票界面查看有无剩余票。 刷出剩余票后，选日期、场次、数量点下一步，选提前填好的游客信息，狂点提交预约直到出现订单。 在整点的时候准备好刷票，一般会在整点过一两分钟内放出来大批量票。这些票也会在一两分钟内被抢光。\n如果没有抢到，不要着急，可以在其他时间上去碰碰运气。或者第二天接着抢。\n","date":"2023-06-11T10:27:32+08:00","image":"https://tsinling.org/p/shaanxi-history-museum/shm_hu02aa61ae1d9de35cbe238d2676170cb9_47527_120x120_fill_q75_box_smart1.jpg","permalink":"https://tsinling.org/p/shaanxi-history-museum/","title":"Shaanxi History Museum"},{"content":" # CURL curl是一个linux下的命令行工具，基于libcurl开发。用来和服务器交互数据。\ncurl支持多种协议(DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET, TFTP, WS and WSS)。\ncurl常用来模仿浏览器向服务器发起请求，方便在开发、测试中调试httd接口。\n要深入了解可以阅读在线文档https://everything.curl.dev/。\n# HTTP 参考https://everything.curl.dev/http结合man手册就可以上手。\n比如curl模拟浏览器访问bing.com。\n1 curl bing.com 请求后发现没有任何返回，我们带上-v(\u0026ndash;verbose)看看交互细节。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 curl bing.com -v * Trying 204.79.197.200:80... * Connected to bing.com (204.79.197.200) port 80 (#0) \u0026gt; GET / HTTP/1.1 \u0026gt; Host: bing.com \u0026gt; User-Agent: curl/7.74.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 301 Moved Permanently \u0026lt; Location: http://cn.bing.com/ \u0026lt; X-MSEdge-Ref: Ref A: F2AB225F32D7483E87030511DC816BB4 Ref B: SG1EDGE0109 Ref C: 2023-05-15T04:59:26Z \u0026lt; Date: Mon, 15 May 2023 04:59:25 GMT \u0026lt; Content-Length: 0 \u0026lt; * Connection #0 to host bing.com left intact 从返回的头发现是重定向到cn.bing.com。于是访问cn.bing.com;或者访问bing.com带上 -L(--localtion)。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 curl cn.bing.com -v * Trying 204.79.197.200:80... * Connected to cn.bing.com (204.79.197.200) port 80 (#0) \u0026gt; GET / HTTP/1.1 \u0026gt; Host: cn.bing.com \u0026gt; User-Agent: curl/7.74.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Cache-Control: private \u0026lt; Content-Length: 16094 \u0026lt; Content-Type: text/html; charset=utf-8 ... curl bing.com -Lv * Trying 13.107.21.200:80... * Connected to bing.com (13.107.21.200) port 80 (#0) \u0026gt; GET / HTTP/1.1 \u0026gt; Host: bing.com \u0026gt; User-Agent: curl/7.74.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 301 Moved Permanently \u0026lt; Location: http://cn.bing.com/ \u0026lt; X-MSEdge-Ref: Ref A: 42181FE0EB5849FD87499B943D23289C Ref B: SG1EDGE0316 Ref C: 2023-05-15T05:17:20Z \u0026lt; Date: Mon, 15 May 2023 05:17:20 GMT \u0026lt; Content-Length: 0 \u0026lt; * Connection #0 to host bing.com left intact * Issue another request to this URL: \u0026#39;http://cn.bing.com/\u0026#39; * Trying 204.79.197.200:80... * Connected to cn.bing.com (204.79.197.200) port 80 (#1) \u0026gt; GET / HTTP/1.1 \u0026gt; Host: cn.bing.com \u0026gt; User-Agent: curl/7.74.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Cache-Control: private \u0026lt; Content-Length: 16094 \u0026lt; Content-Type: text/html; charset=utf-8 ... bing.com返回16094字节内容,返回内容如果让浏览器解析，在浏览器里就能看到微软搜索引擎UI了。\n# GET 1 2 3 4 5 6 7 8 9 // get curl url curl -X GET url curl -Lv bing.com // get with query curl url?a=b\u0026amp;c=d curl --url-query a=b --url-query c=d url curl --get --data-urlencode a=b --data-urlencode c=d url # POST 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // post url query (--url-query) curl -X POST --url-query a=b --url-query c=d url // application/x-www-form-urlencoded (-d --data --data-urlencode ) curl -X POST -d a=b -d c=d url curl -X POST --data a=b --data c=d url curl -X POST --data-urlencode a=b --data-urlencode c=d url // application/json curl --data [arg] --header \u0026#34;Content-Type: application/json\u0026#34; --header \u0026#34;Accept: application/json\u0026#34; url curl --json \u0026#39;{\u0026#34;tool\u0026#34;: \u0026#34;curl\u0026#34;}\u0026#39; https://example.com/ (curl \u0026gt;=7.82.0) // multipart/form-data (-F --form) curl -X POST -F a=b -F c=d url # PUT 1 2 //json curl -X PUT -H \u0026#34;Content-Type: application/json\u0026#34; -H \u0026#34;Accept: application/json\u0026#34; -d a=b -d c=d url # DELETE 1 2 3 //json curl -X DELETE -H \u0026#34;Accept: application/json\u0026#34; --url-query uuid=xxx url curl -X DELETE -H \u0026#34;Accept: application/json\u0026#34; url?uuid=xxx # 测试我的api # get 请求10.10.10.20/api/v1，返回\u0026quot;default api v1 content\u0026quot;。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 curl 10.10.10.20/api/v1 \u0026lt;a href=\u0026#34;/api/v1/\u0026#34;\u0026gt;Moved Permanently\u0026lt;/a\u0026gt;. curl 10.10.10.20/api/v1 -Lv \u0026gt; GET /api/v1 HTTP/1.1 \u0026gt; Host: 10.10.10.20 \u0026gt; User-Agent: curl/7.74.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 301 Moved Permanently \u0026lt; Content-Type: text/html; charset=utf-8 \u0026lt; Location: /api/v1/ \u0026lt; Date: Mon, 15 May 2023 05:55:33 GMT \u0026lt; Content-Length: 43 \u0026lt; * Ignoring the response-body * Connection #0 to host 10.10.10.20 left intact * Issue another request to this URL: \u0026#39;http://10.10.10.20/api/v1/\u0026#39; * Found bundle for host 10.10.10.20: 0x55af6299e9f0 [serially] * Can not multiplex, even if we wanted to! * Re-using existing connection! (#0) with host 10.10.10.20 * Connected to 10.10.10.20 (10.10.10.20) port 80 (#0) \u0026gt; GET /api/v1/ HTTP/1.1 \u0026gt; Host: 10.10.10.20 \u0026gt; User-Agent: curl/7.74.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Content-Type: text/plain; charset=utf-8 \u0026lt; Date: Mon, 15 May 2023 05:55:33 GMT \u0026lt; Content-Length: 22 \u0026lt; * Connection #0 to host 10.10.10.20 left intact default api v1 content 请求10.10.10.20/api/v1/api?cmd=xxx，返回。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 curl 10.10.10.20/api/v1/api?cmd=status UP 0 years, 0 days, 5 hours, 39 minutes, 32 seconds, 931 milliseconds, 598 microseconds FreeSWITCH (Version 1.10.9 -release-21-a615e85afc 64bit) is ready 0 session(s) since startup 0 session(s) - peak 0, last 5min 0 0 session(s) per Sec out of max 30, peak 0, last 5min 0 1000 session(s) max min idle cpu 0.00/99.63 Current Stack Size/Max 240K/8192K curl 10.10.10.20/api/v1/api?cmd=sofia%20status curl 10.10.10.20/api/v1/api --url-query \u0026#39;cmd=sofia status\u0026#39; Name Type Data State ================================================================================================= external-ipv6 profile sip:mod_sofia@[::1]:5080 RUNNING (0) mydomain alias internal ALIASED external profile sip:mod_sofia@10.10.10.20:5080 RUNNING (0) external::example.com gateway sip:joeuser@example.com NOREG external::vos_out gateway sip:username@vos.ip NOREG external::vos_in gateway sip:username@vos.ip NOREG external::myfsgateway gateway sip:1000@10.10.10.200 NOREG external::p2p gateway sip:FreeSWITCH@p2p.ip NOREG 10.10.10.20 alias internal ALIASED internal-ipv6 profile sip:mod_sofia@[::1]:5060 RUNNING (0) internal profile sip:mod_sofia@10.10.10.20:5060 RUNNING (0) ================================================================================================= 4 profiles 2 aliases 请求10.10.10.20/api/v1/accounts?id=8000和10.10.10.20/api/v1/accounts?id=8000\u0026amp;domain=mydomain返回accounts并json_pp格式化。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 curl 10.10.10.20/api/v1/accounts?id=8000|json_pp ... { \u0026#34;code\u0026#34; : { \u0026#34;rtcode\u0026#34; : 0, \u0026#34;rtmsg\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;data\u0026#34; : { \u0026#34;len\u0026#34; : 2, \u0026#34;lists\u0026#34; : [ { \u0026#34;a1hash\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;auth\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;cacheable\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;domain\u0026#34; : \u0026#34;10.10.10.20\u0026#34;, \u0026#34;group\u0026#34; : \u0026#34;default\u0026#34;, \u0026#34;id\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;password\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;proxy\u0026#34; : \u0026#34;10.10.10.20\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;5fd443ed-c829-4053-9309-b9715f010c1d\u0026#34; }, { \u0026#34;a1hash\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;auth\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;cacheable\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;domain\u0026#34; : \u0026#34;mydomain\u0026#34;, \u0026#34;group\u0026#34; : \u0026#34;default\u0026#34;, \u0026#34;id\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;password\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;proxy\u0026#34; : \u0026#34;10.10.10.20\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;a6df52df-f570-4a29-89a0-530b3a8a8e09\u0026#34; } ] } } curl --url-query id=8000 --url-query domain=mydomain 10.10.10.20/api/v1/accounts|json_pp ... { \u0026#34;code\u0026#34; : { \u0026#34;rtcode\u0026#34; : 0, \u0026#34;rtmsg\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;data\u0026#34; : { \u0026#34;len\u0026#34; : 1, \u0026#34;lists\u0026#34; : [ { \u0026#34;a1hash\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;auth\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;cacheable\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;domain\u0026#34; : \u0026#34;mydomain\u0026#34;, \u0026#34;group\u0026#34; : \u0026#34;default\u0026#34;, \u0026#34;id\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;password\u0026#34; : \u0026#34;8000\u0026#34;, \u0026#34;proxy\u0026#34; : \u0026#34;10.10.10.20\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;53699506-c953-4c09-8a9a-dc76be6e902d\u0026#34; } ] } } # post form-urlencode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 //--url-query curl -X POST --url-query numberstart=87654321 --url-query numberend=87654325 -H Content-Type:application/json http://10.10.10.20/api/v1/e164s|json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 679 100 679 0 0 96944 0 --:--:-- --:--:-- --:--:-- 110k { \u0026#34;code\u0026#34; : { \u0026#34;rtcode\u0026#34; : 0, \u0026#34;rtmsg\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;data\u0026#34; : { \u0026#34;len\u0026#34; : 5, \u0026#34;lists\u0026#34; : [ { \u0026#34;enable\u0026#34; : true, \u0026#34;gname\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;lockin\u0026#34; : false, \u0026#34;lockout\u0026#34; : false, \u0026#34;number\u0026#34; : \u0026#34;87654321\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;5160e5b2-408c-46b1-9419-137cad1bf8cf\u0026#34; }, { \u0026#34;enable\u0026#34; : true, \u0026#34;gname\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;lockin\u0026#34; : false, \u0026#34;lockout\u0026#34; : false, \u0026#34;number\u0026#34; : \u0026#34;87654322\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;149d873a-856b-497d-a35b-5d794cb8b84c\u0026#34; }, { \u0026#34;enable\u0026#34; : true, \u0026#34;gname\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;lockin\u0026#34; : false, \u0026#34;lockout\u0026#34; : false, \u0026#34;number\u0026#34; : \u0026#34;87654323\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;25b228fe-6609-45d1-9884-4cf7fa7c91fd\u0026#34; }, { \u0026#34;enable\u0026#34; : true, \u0026#34;gname\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;lockin\u0026#34; : false, \u0026#34;lockout\u0026#34; : false, \u0026#34;number\u0026#34; : \u0026#34;87654324\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;8c3c6e8f-6537-4fea-bea9-ba4408088557\u0026#34; }, { \u0026#34;enable\u0026#34; : true, \u0026#34;gname\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;lockin\u0026#34; : false, \u0026#34;lockout\u0026#34; : false, \u0026#34;number\u0026#34; : \u0026#34;87654325\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;67a18b77-3f1f-42fa-b20d-bdaa71a92425\u0026#34; } ] } } //form-urlencoded curl -X POST -d a=b -d c=d url json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 //json curl --data [arg] --header \u0026#34;Content-Type: application/json\u0026#34; --header \u0026#34;Accept: application/json\u0026#34; url curl --json \u0026#39;{\u0026#34;tool\u0026#34;: \u0026#34;curl\u0026#34;}\u0026#39; https://example.com/ (curl \u0026gt;=7.82.0) curl -X POST -d\u0026#39;{\u0026#34;number\u0026#34;:\u0026#34;12345678\u0026#34;}\u0026#39; --header \u0026#34;Content-Type: application/json\u0026#34; --header \u0026#34;Accept: application/json\u0026#34; 10.10.10.20/api/v1/e164 -v|json_pp curl --json \u0026#39;{\u0026#34;number\u0026#34;:\u0026#34;1234567890\u0026#34;}\u0026#39; --header \u0026#34;Content-Type: application/json\u0026#34; --header \u0026#34;Accept: application/json\u0026#34; 10.10.10.20/api/v1/e164 -v|json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* Trying 10.10.10.20:80... * Connected to 10.10.10.20 (10.10.10.20) port 80 (#0) \u0026gt; POST /api/v1/e164 HTTP/1.1 \u0026gt; Host: 10.10.10.20 \u0026gt; User-Agent: curl/7.88.1 \u0026gt; Content-Type: application/json \u0026gt; Accept: application/json \u0026gt; Content-Length: 23 \u0026gt; } [23 bytes data] \u0026lt; HTTP/1.1 200 OK \u0026lt; Content-Type: application/json; charset=utf-8 \u0026lt; Date: Wed, 17 May 2023 15:31:02 GMT \u0026lt; Content-Length: 185 \u0026lt; { [185 bytes data] 100 208 100 185 100 23 30766 3825 --:--:-- --:--:-- --:--:-- 41600 * Connection #0 to host 10.10.10.20 left intact { \u0026#34;code\u0026#34; : { \u0026#34;rtcode\u0026#34; : 0, \u0026#34;rtmsg\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;data\u0026#34; : { \u0026#34;len\u0026#34; : 1, \u0026#34;lists\u0026#34; : [ { \u0026#34;enable\u0026#34; : true, \u0026#34;gname\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;lockin\u0026#34; : false, \u0026#34;lockout\u0026#34; : false, \u0026#34;number\u0026#34; : \u0026#34;1234567890\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;8fad3099-040e-4688-8632-0dd03fd5391a\u0026#34; } ] } } form-data 1 curl -X POST -F a=b -F c=d url # put 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 //json curl -X PUT -H \u0026#34;Content-Type: application/json\u0026#34; -H \u0026#34;Accept: application/json\u0026#34; -d a=b -d c=d url curl -X PUT --json \u0026#39;{\u0026#34;gname\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;number\u0026#34;:\u0026#34;000000001\u0026#34;,\u0026#34;enable\u0026#34;:true,\u0026#34;lockin\u0026#34;:false,\u0026#34;lockout\u0026#34;:false}\u0026#39; -H \u0026#34;Content-Type: application/json\u0026#34; -H \u0026#34;Accept: application/json\u0026#34; -Lv 10.10.10.20/api/v1/e164/8fad3099-040e-4688-8632-0dd03fd5391a|json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* Trying 10.10.10.20:80... * Connected to 10.10.10.20 (10.10.10.20) port 80 (#0) \u0026gt; PUT /api/v1/e164/8fad3099-040e-4688-8632-0dd03fd5391a HTTP/1.1 \u0026gt; Host: 10.10.10.20 \u0026gt; User-Agent: curl/7.88.1 \u0026gt; Content-Type: application/json \u0026gt; Accept: application/json \u0026gt; Content-Length: 78 \u0026gt; } [78 bytes data] \u0026lt; HTTP/1.1 200 OK \u0026lt; Content-Type: application/json; charset=utf-8 \u0026lt; Date: Wed, 17 May 2023 16:07:14 GMT \u0026lt; Content-Length: 184 \u0026lt; { [184 bytes data] 100 262 100 184 100 78 20852 8839 --:--:-- --:--:-- --:--:-- 32750 * Connection #0 to host 10.10.10.20 left intact { \u0026#34;code\u0026#34; : { \u0026#34;rtcode\u0026#34; : 0, \u0026#34;rtmsg\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;data\u0026#34; : { \u0026#34;len\u0026#34; : 1, \u0026#34;lists\u0026#34; : [ { \u0026#34;enable\u0026#34; : true, \u0026#34;gname\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;lockin\u0026#34; : false, \u0026#34;lockout\u0026#34; : false, \u0026#34;number\u0026#34; : \u0026#34;000000001\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;8fad3099-040e-4688-8632-0dd03fd5391a\u0026#34; } ] } } # delete 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 //json curl -X DELETE -H \u0026#34;Accept: application/json\u0026#34; url curl -X DELETE -H \u0026#34;Content-Type: application/json\u0026#34; -H \u0026#34;Accept: application/json\u0026#34; 10.10.10.20/api/v1/e164/8c3c6e8f-6537-4fea-bea9-ba4408088557 |json_pp % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 183 100 183 0 0 37492 0 --:--:-- --:--:-- --:--:-- 45750 { \u0026#34;code\u0026#34; : { \u0026#34;rtcode\u0026#34; : 0, \u0026#34;rtmsg\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;data\u0026#34; : { \u0026#34;len\u0026#34; : 1, \u0026#34;lists\u0026#34; : [ { \u0026#34;enable\u0026#34; : true, \u0026#34;gname\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;lockin\u0026#34; : false, \u0026#34;lockout\u0026#34; : false, \u0026#34;number\u0026#34; : \u0026#34;87654324\u0026#34;, \u0026#34;uuid\u0026#34; : \u0026#34;8c3c6e8f-6537-4fea-bea9-ba4408088557\u0026#34; } ] } } ","date":"2023-05-14T10:44:13+08:00","permalink":"https://tsinling.org/p/curl-how-to/","title":"Curl How To"},{"content":" # Cobra cobra是一个用来创建命令行程序的扩展库 https://github.com/spf13/cobra。\n# cli 命令行程序由applicaton 和三个非必须部分command argument flag组成。\napplication command arguments flags 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #application git #application command git version #application command flag git version --build-options #application command arguments git clone https://github.com/signalwire/freeswitch.git #application command flags arguments git clone -bv1.10 -v https://github.com/signalwire/freeswitch.git freeswitch app command flag1 flag2 argument1 argument2 git clone -bv1.0 -v https://github.com/signalwire/freeswitch.git freeswitch flags 格式可以参考:\nhttps://pkg.go.dev/flag#hdr-Command_line_flag_syntax\nhttps://github.com/spf13/pflag#command-line-flag-syntax\nhttps://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\n1 2 3 4 5 6 7 -flag -flag=x -flag x // non-boolean flags only --flag --flag=x --flag x // non-boolean flags only # app cobra提供了cobra-cli来自动生成application。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 go install github.com/spf13/cobra-cli@latest mkdir app \u0026amp;\u0026amp; cd app go mod init github.com/xxx/app cobra-cli init #app directory ▾ app/ ▾ cmd/ root.go main.go go run main.go cobra-cli add server cobra-cli add config cobra-cli add create -p \u0026#39;configCmd\u0026#39; #app direcotry ▾ app/ ▾ cmd/ config.go create.go serve.go root.go main.go # vscode vscode在调试app时需在launch.json中新增args来传参。\nargs传入app的command，argument，flag。\n1 \u0026#34;args\u0026#34;:[\u0026#34;command\u0026#34;,\u0026#34;argument1\u0026#34;,\u0026#34;argument2\u0026#34;,\u0026#34;flag1\u0026#34;,\u0026#34;flag2\u0026#34;] 1 2 3 4 5 6 7 8 9 10 11 12 13 { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Launch Package\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;go\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;auto\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${fileDirname}\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;fsconfig\u0026#34;,\u0026#34;/etc/myetc\u0026#34;] } ] } ","date":"2022-06-20T13:25:51+08:00","image":"https://tsinling.org/p/command-line-develop/cli_huba75af2562f2b78e9c6b837265654abd_61207_120x120_fill_box_smart1_3.png","permalink":"https://tsinling.org/p/command-line-develop/","title":"Command Line develop"},{"content":" # Realtek rtl8188eu 在抽屉翻出来个十年前的USB无线网卡，怼到windows计算机的usb口上，直接使用即可（windows10带8188eu驱动程序）。 切换一下系统到debian，默认是不能驱动的。于是到realtek官方网站看看有没有新的驱动，翻遍了网站也没找到下载链接。\n# Debian 在debian环境下，realtek的驱动和固件在non-free里面。 打开sources.list，在main后面加入non-free search一下 rtl8188eu(源里面需支持non-free，否则要切换带nong-free的安装源)。\n安装驱动firmware-realtek，ip link查看网卡，显示wlx0c826830b763网卡。\n安装wpasupplicant，在wlx0c826830b763连接到SSID时需要wpa辅助wpa key协商。\n打开/etc/network/interfaces，为wlx0c826830b763网卡添加参数。\nifup wlx0c826830b763，连ssid，获取ip完成联网。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 echo /etc/apt/sources.list deb https://mirrors.bfsu.edu.cn/debian/ bullseye main contrib non-free ... apt-get update \u0026amp;\u0026amp; apt-cache search rtl8188eu firmware-realtek - Binary firmware for Realtek wired/wifi/BT adapters apt-get -y install firmware-realtek ... ip link 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: wlx0c826830b763: \u0026lt;BROADCAST,MULTICAST\u0026gt; mtu 2312 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ether 0c:82:68:30:b7:63 brd ff:ff:ff:ff:ff:ff apt-get install wpasupplicant cat /etc/network/interfaces ... auto wlx0c826830b763 iface wlx0c826830b763 inet dhcp wpa-ssid myssid wpa-psk mypswd ifup wlx0c826830b763 ... # wireless modes # AP AP(AccessPoint infrastructure mode)，我们常用的热点就可以叫ap。\n# Station Station连接到AP，成为WIFI网络的一部分。我们常用的手机、计算机、等终端。\n# Monitor 监听模式，只进不出，用来分析网络状况。\n# Ad-Hoc（IBSS） IBSS(Independent Basic Service)，点对点模式。\n# WDS Wireless Distribution System，有无线桥接和无线中继两种。\n# mesh 多跳无线网格，mesh网络是一种基于多跳路由和对等网络的技术。\n# iw iw是管理802.11设备的命令行工具，支持被添加进内核的的驱动程序管理和配置。\niw list 列出所有的wireless设备的参数。\niw dev wlx0c826830b763 scan 扫描AP。\niw dev wlx0c826830b763 link 获取链路状态。\niw wlx0c826830b763 connect myssid 连接到myssid。\n\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 apt-get update \u0026amp;\u0026amp; apt-get install iw iw list ... iw dev Interface wlx0c826830b763 ifindex 2 wdev 0x200000001 addr 0c:82:68:30:b7:63 ssid hello type managed txpower 13.00 dBm iw dev wlx0c826830b763 link Connected to c0:bc:9a:15:d3:50 (on wlx0c826830b763) SSID: hello freq: 2422 signal: -82 dBm tx bitrate: 65.0 MBit/s ... # aircrack-ng aircrack-ng是无线网络的安全套件包。\n主要致力于以下四个领域。\n监控，数据包捕获、导出、分析。 渗透，数据包注入，取消身份验证，虚拟接入点。 测试，网卡和驱动功能的测试。 破解，WEP和WPA PSK（WPA1和WPA2） # 开始前 在使用aircrack-ng套件之前需要检查无线网卡的芯片组是否兼容。\n检查了一下rtl8188eu在kernel.org中仅能做为station，不支持ap、ibss、mesh、monitor。\nhttps://wireless.wiki.kernel.org/en/users/drivers\nhttp://linux-wless.passys.nl/\n# 新的驱动 linux firmware 中rtl8188eu就是个普通的上网卡，其他方式是不可行的。\n在aircrack-ng上翻了翻，找到了支持mesh、monitor和frame injiection的新驱动https://github.com/aircrack-ng/rtl8188eus。\n按照README一路安装驱动程序，注意这里的仅仅是驱动程序，固件还是使用前面non-free里面的bin文件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 apt-get update \u0026amp;\u0026amp; apt-get upgrade \u0026amp;\u0026amp; apt-get dist-upgrade apt-get install linux-headers-$(uname -r) apt get install git build-essential libelf-dev dkms bc echo \u0026#39;blacklist r8188eu\u0026#39;|sudo tee -a \u0026#39;/etc/modprobe.d/realtek.conf\u0026#39; rmmod r8188eu.ko reboot cd usr/src git clone https://github.com/aircrack-ng/rtl8188eus.git cd rtl8188eus \u0026amp;\u0026amp; make \u0026amp;\u0026amp; make install lsmod|grep 8188 8188eu 1249280 0 cfg80211 970752 1 8188eu usbcore 323584 5 ehci_pci,usbhid,8188eu,ehci_hcd,uhci_hcd ip link 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: wlx0c826830b763: \u0026lt;BROADCAST,MULTICAST\u0026gt; mtu 2312 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ether 0c:82:68:30:b7:63 brd ff:ff:ff:ff:ff:ff iw dev phy#0 Interface wlx0c826830b763 ifindex 2 wdev 0x1 addr 0c:82:68:30:b7:63 type managed txpower 13.00 dBm ifup wlx0c826830b763 Internet Systems Consortium DHCP Client 4.4.1 Copyright 2004-2018 Internet Systems Consortium. All rights reserved. For info, please visit https://www.isc.org/software/dhcp/ Listening on LPF/wlx0c826830b763/0c:82:68:30:b7:63 Sending on LPF/wlx0c826830b763/0c:82:68:30:b7:63 Sending on Socket/fallback DHCPDISCOVER on wlx0c826830b763 to 255.255.255.255 port 67 interval 6 DHCPDISCOVER on wlx0c826830b763 to 255.255.255.255 port 67 interval 6 DHCPOFFER of 192.168.1.221 from 192.168.1.1 DHCPREQUEST for 192.168.1.221 on wlx0c826830b763 to 255.255.255.255 port 67 DHCPACK of 192.168.1.221 from 192.168.1.1 bound to 192.168.1.221 -- renewal in 1407 seconds. 网卡做为statsion可以正常上网了。新驱动支持其他几种模式，我们下来安装aircrack-ng来看看。\n# 安装 aircrack-ng可以编译安装也可以下安装包。\nhttps://github.com/aircrack-ng/aircrack-ng.git\nhttps://packagecloud.io/aircrack-ng/release\n1 2 3 wget --content-disposition https://packagecloud.io/aircrack-ng/release/packages/any/any/aircrack-ng_1.7-1_amd64.deb/download.deb apt-get install wireless-tools dpkg -i aircrack-ng_1.7-1_amd64.deb # 监控 断开刚才的station连接，设置网卡处于monitor模式，扫描周边网络。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 airmon-ng check kill ip link set wlx0c826830b763 down iw dev wlx0c826830b763 set type monitor iw dev phy#0 Interface wlx0c826830b763 ifindex 2 wdev 0x100000001 addr 0c:82:68:30:b7:63 type monitor txpower 13.00 dBm airodump-ng wlx0c826830b763 ","date":"2022-05-25T15:49:34+08:00","permalink":"https://tsinling.org/p/rtl8188eu/","title":"Rtl8188eu"},{"content":" # VSCODE远程开发 # 简介 微软家的开发工具从来不缺少远程开发，从二十年前的visual stuidio 6到现在的visual stuidio 2022都具有远程开发的功能。\n那么号称宇宙第一IDE的vscode当然不会例外，vscode对远程开发的支持通过扩展remote-ssh来实现。\nvisualstudio的远程开发参考 https://docs.microsoft.com/zh-cn/visualstudio/debugger/remote-debugging\nvscode的远程开发参考 https://code.visualstudio.com/docs/remote/remote-overview\n# 构架 我们看一下vscode远程开发的结构示意图\nLocalOS是vscode（remote-ssh）使用的客户端主机，RemoteOS是安装vscode server（具备真实开发环境的服务器）等服务端。\n我们操作LocalOS上的vscode通过ssh遥控RemoteOS上的代码，完成开发、调试工作。\n# 目标 在LocalOS Mac上远程调试 RemoteOS debian11.3上的golang中间件。\n# 准备工作 RemoteOS安装openssh-server，build-essential，golang(Debian11源中的golang版本比较老，可以从https://golang.google.cn/dl/下载新版本安装)。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 apt-get update \u0026amp;\u0026amp; apt-get install -y openssh-server build-essential wget https://golang.google.cn/dl/go1.18.1.linux-amd64.tar.gz tar -zxvf ./go1.18.1.linux-amd64.tar.gz -C /usr/local/ echo -e \u0026#34;#\\n# Golang GOROOT/bin\\n export PATH+=:`/usr/local/go/bin/go env GOROOT`/bin\u0026#34; \u0026gt;\u0026gt;~/.bashrc echo -e \u0026#34;#\\n# Golang GOPATH/bin\\n export PATH+=:`/usr/local/go/bin/go env GOPATH`/bin\u0026#34; \u0026gt;\u0026gt;~/.bashrc source .bashrc go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,direct go version go version go1.18.1 linux/amd64 LocalOS安装vscode和vscode扩展remote-ssh。\n1 2 3 4 5 6 7 brew update brew install visual-studio-code code --install-extension ms-vscode-remote.remote-ssh code -v 1.66.2 arm64 LocalOS SSH生成~/.ssh/ssh_rsa和~/.ssh/ssh_rsa.pub。\n把ssh_rsa.pub加入到RemoteOS /root/.ssh/authorized_keys。\nLocalOS使用ssh_rsa登入root@remoteOS。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/Users/mymac/.ssh/id_rsa): ~/.ssh/ssh_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: scp ~/.ssh/ssh_rsa.pub bob@10.10.10.10:/home/bob/ssh_rsa.pub ... ssh bob@10.10.10.10 ... su root -l ... cat /home/bob/ssh_rsa.pub \u0026gt;\u0026gt;~/.ssh/authorized_keys ... exit ... exit ... ssh -i .ssh/ssh_rsa root@10.10.10.10 root@d113:~# # 小试牛刀 LocalOS使用密钥ssh到RemoteOS成功后就可以打开vscode使用远程开发了。\n接下来基本都是图形化操作，可以参考https://code.visualstudio.com/docs/remote/ssh-tutorial。\n对于每一个RemoteOS都可以有如下配置，配置保存在~/.ssh/config文件里。\n1 2 3 4 5 Host debian remote server HostName 10.10.10.10 User root ForwardAgent yes IdentityFile /Users/mymac/.ssh/ssh_rsa 在vscode中，我们SSH到一台RemoteOS就像我们本地LocalOS开发一样简单。\n","date":"2022-04-15T15:39:30+08:00","permalink":"https://tsinling.org/p/vscode-remote-ssh/","title":"Vscode Remote Ssh"},{"content":" # postgresql Postgresql 是一个功能强大的开源关系数据库系统.\nPostgresql的官方网站是 https://postgresql.org.\n最新的版本是14，了解可以访问 http://www.postgres.cn/docs/14/index.html.\n# 安装 # windows 由EDB认证的Postgresql installer.\nhttps://www.enterprisedb.com/downloads/postgres-postgresql-downloads\n下载并安装，按照提示设置postgres数据库的密码就可以了。\n# linux linux不同发行版本都可以从自己的软件库进行安装，以debian为例.\n先安装postgresql，以postgres用户local（Unix domain socket）方式连接到postgres数据库.\n修改用户postgres密码，再以postgres用户host（localhost）方式连接到数据库。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 root@debian1110:~# apt-get install postgresql … root@debian1110:~# su postgres postgres@debian1110:/root$ cd postgres@debian1110:~$ psql psql (13.5 (Debian 13.5-0+deb11u1)) Type \u0026#34;help\u0026#34; for help. postgres=# postgres=# \\password Enter new password: Enter it agin: postgres=# \\q postgres@debian1110:~$ exit root@debian1110:~# root@debian1110:~# psql -hlocalhost postgres postgres Password for user postgres: psql (13.5 (Debian 13.5-0+deb11u1)) SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off) Type \u0026#34;help\u0026#34; for help. postgres=# select version(); version ------------------------------------------------------------------------------------------------------------------------ PostgreSQL 13.5 (Debian 13.5-0+deb11u1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 10.2.1-6) 10.2.1 20210110, 64-bit (1 row) postgres=# postgres=# \\l List of databases Name | Owner | Encoding | Collate | Ctype | Access privileges -----------+----------+----------+-------------+-------------+----------------------- postgres | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | template0 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres + | | | | | postgres=CTc/postgres template1 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres + | | | | | postgres=CTc/postgres (3 rows) postgres=# # mac mac系统上可以去EDB下载，也可以用brew直接安装（brew安装后要以当前用户登入数据库）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 brew install postgresql ➜ ~ psql postgres bob psql (14.1) Type \u0026#34;help\u0026#34; for help. postgres=# postgres=# select version(); version ------------------------------------------------------------------------------------------------------------------- PostgreSQL 14.1 on aarch64-apple-darwin21.1.0, compiled by Apple clang version 13.0.0 (clang-1300.0.29.3), 64-bit (1 row) postgres=# \\l List of databases Name | Owner | Encoding | Collate | Ctype | Access privileges -----------+-------+----------+---------+-------+------------------- postgres | bob | UTF8 | C | C | template0 | bob | UTF8 | C | C | =c/bob + | | | | | bob=CTc/bob template1 | bob | UTF8 | C | C | =c/bob + | | | | | bob=CTc/bob (3 rows) postgres=# # 客户端 # psql 命令行客户端工具psql。\n1 2 3 4 5 6 7 8 9 10 psql --help Usage: psql [OPTION]... [DBNAME [USERNAME]] ... Connection options: -h, --host=HOSTNAME database server host or socket directory (default: \u0026#34;local socket\u0026#34;) -p, --port=PORT database server port (default: \u0026#34;5432\u0026#34;) -U, --username=USERNAME database user name (default: \u0026#34;bob\u0026#34;) -w, --no-password never prompt for password -W, --password force password prompt (should happen automatically) # DBeaver 开源图形客户端工具。\n1 2 3 brew search dbeaver .... brew install dbeaver-community ","date":"2021-12-22T16:09:56+08:00","permalink":"https://tsinling.org/p/postgresql-how-to/","title":"postgresql how to"},{"content":" # Mac port 8021 在mac上调试程序的时，偶尔碰到tcp端口8021被系统占用，调试失败。\n用lsof -Pi:8021看看PID，kill就可以了。碰到不能kill的需要进一步调查，然后得到如下命令，下次碰到被占用时试试。\nsudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.ftp-proxy.plist\n# 谁占用了8021 查看了mac上的端口占用表，表格里面没有8021是那个应用占用。\n用lsof查看一下占用8021端口的程序。\n1 2 3 4 sudo lsof -Pi:8021 ... sudo kill -9 1 kill: 1: Operation not permitted kill pid 1失败。了解了一下launchd，mac上的launchd和linux上的initd，systemd类似。\n在网上搜了一会儿相同的问题，找到一篇类似问题的解决方案.\n/System/Library/LaunchDaemons/com.apple.ftp-proxy.plist文件中定义了8021端口。\n# 如何释放8021 1 sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.ftp-proxy.plist # 附录 https://support.apple.com/zh-cn/HT202944\nhttps://apple.stackexchange.com/questions/404346/what-is-intu-ec-client-listening-on-tcp-port-8021/404356#404356\n","date":"2021-12-13T14:51:09+08:00","permalink":"https://tsinling.org/p/port-8021-on-mac/","title":"Port 8021 on mac"},{"content":" # Macbook Pro 2021 2021年10月19日凌晨1点，apple召开了秋季线上发布会。\n大家期待的arm M2 soc并没有到来，新发布的arm soc采用堆核心，发布14inch和16inch的macbook pro。\n自己的使用对GPU要求不高，CPU核心提高为前提，拿到了macbook pro 14inch 10coreCPU/14coreGPU的机器。\n这是第一次使用apple家的macbook，macbook pro 2021上手使用两个礼拜的一些情况。\n# CPU/GPU 2020 M1 (2+2)Firestorm + (2+2)icestorm CPU/8 core GPU 2021 M1 pro (2+2+2+2)Firestorm + 2icestorm CPU/14～32 core GPU 2021 M1 max (2+2+2+2)Firestorm + 2icestorm CPU/14～32 core GPU # 主要用途 以码字、后端API编译为主，影音为辅，以后可能需要处理点视频素材。\n# 必备软件 # Homebrew homebrew是mac上开源包管理器。官方安装提供了脚本，打开mac默认shell zsh执行脚本就可以安装（系统会提示安装git，按提示安装即可）。\n1 2 3 /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; … curl: (35) LibreSSL SSL_connect: Connection reset by peer in connection to raw.githubusercontent.com:443 如果github访问受阻，可以使用国内的源，根据提示完成安装。源推荐使用bfsu。\n基于git安全考虑，需要设置brew的几个目录。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 /bin/zsh -c \u0026#34;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\u0026#34; ... git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-core git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-cask git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-services brew -v Homebrew 3.5.1-48-g4484068 Homebrew/homebrew-core (git revision c5e07e21cf2; last commit 2022-06-13) Homebrew/homebrew-cask (git revision 729a0c47c3; last commit 2022-06-13) brew update -v Already up-to-date. # Oh-my-zsh oh-my-zsh是zsh的个性化配置管理器，默认安装就可以。\nsh -c \u0026quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026quot;\n# Vim 1 2 3 4 5 cp /usr/share/vim/vimrc ~/.vimrc vim ~/.vimrc syntax on set cursorline set autoindent # Golang 1 2 3 4 5 6 7 8 9 brew install golang go version go version go1.17.3 darwin/arm64 go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,direct go env -w GOBIN=`go env GOPATH`/bin echo \u0026#39; export PATH=$(go env GOBIN):$PATH\u0026#39; \u0026gt;\u0026gt;~/.zprofile # Visual-studio-code 先用brew安装vscode，打开vscode，设置同步一下插件就可以使用了。\n1 brew install visual-studio-code # SshPrivatekey mac对key的保护比较严格，一定要设置下key的权限，只能允许当前用户读取。\n1 2 3 4 mkdir -p ~/.ssh cp ~/Downloads/.ssh/id_rsa ~/.ssh chmod 400 ~/.ssh/id_rsa ssh -T git@github.com # Postgresql 安装一下postgresql数据库和dbeaver数据库图形管理软件（登入postgre数据库以默认登入系统的用户登入）。\n1 2 3 4 brew install postgresql brew services restart postgresql brew install dbeaver-community ... # 其他软件 使用brew安装就可以，比如utm，sourcetree，freeplane，libreoffice，firefox，iina，keka，wechat，ximalaya，downie，thunder，qbittorrent等。\n","date":"2021-12-10T16:52:16+08:00","permalink":"https://tsinling.org/p/macbook-pro-2021/","title":"Macbook Pro 2021"},{"content":" # Vmware Network # 环境 本地机器两个千兆网卡，在本地机器上安装win10，VMwareWorkstation16，还有一些日常软件。\n在VMware上创建一台虚拟机，网络桥接到本地，虚拟机DHCP获取IP地址上网。发现虚拟机的网络经常出现获取不到IP地址。\n# 可能的原因 # DHCP Server dhcp server 使用RouterOS v6.48.3 dhcp package，dhcp client只有虚拟机上时好时坏，其他的dhcp client正常使用。在winbox里查看dhcp client的状态，在等待client发包。\n# DHCP Client dhcp client 使用命令ifdown,ifup皆不能从dhcp server收到任何回应。\n# 罪魁祸首 Vmware-\u0026gt;编辑-\u0026gt;虚拟网络编辑器-\u0026gt;更改设置，把默认的已桥接至(自动)改成(目标网卡)，应用保存即可。\n","date":"2021-07-14T20:26:17+08:00","permalink":"https://tsinling.org/p/vmware-network/","title":"Vmware Network"},{"content":" # 4 FORM # 4.1 Web表单核心 # 4.1.1 表单概述 # 4.1.2 第一个表单 # 4.1.2.1 表单定义 HTML Form 是用户和web站点交互的主要内容之一。 表单由一个或多个小部件组成，类似其他语言的可视化控件。 # 4.1.2.2 设计表单 构建一个简单的联系人表单。\n# 4.1.2.3 实现表单 为了实现上述表单，需要使用以下HTML element\n\u0026lt;form\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input\u0026gt; \u0026lt;textarea\u0026gt; \u0026lt;button\u0026gt; # 4.1.2.4 基本表单样式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Your first HTML form\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; form { /* 居中表单 */ margin: 0 auto; width: 400px; /* 显示表单的轮廓 */ padding: 1em; border: 1px solid #CCC; border-radius: 1em; } ul { list-style: none; padding: 0; margin: 0; } form li+li { margin-top: 1em; } label { /* 确保所有label大小相同并正确对齐 */ display: inline-block; width: 90px; text-align: right; } input, textarea { /* 确保所有文本输入框字体相同 textarea默认是等宽字体 */ font: 1em sans-serif; /* 使所有文本输入框大小相同 */ width: 300px; box-sizing: border-box; /* 调整文本输入框的边框样式 */ border: 1px solid #999; } input:focus, textarea:focus { /* 给激活的元素一点高亮效果 */ border-color: #000; } textarea { /* 使多行文本输入框和它们的label正确对齐 */ vertical-align: top; /* 给文本留下足够的空间 */ height: 5em; } .button { /* 把按钮放到和文本输入框一样的位置 */ padding-left: 90px; /* 和label的大小一样 */ } button { /* 这个外边距的大小与label和文本输入框之间的间距差不多 */ margin-left: .5em; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;/my-handling-form-page\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Name:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;user_name\u0026#34; /\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;mail\u0026#34;\u0026gt;E-mail:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;mail\u0026#34; name=\u0026#34;user_mail\u0026#34; /\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;msg\u0026#34;\u0026gt;Message:\u0026lt;/label\u0026gt; \u0026lt;textarea id=\u0026#34;msg\u0026#34; name=\u0026#34;user_message\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;button\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Send your message\u0026lt;/button\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; # 4.1.2.5 发送数据 action method # 4.1.3 构造表单 \u0026lt;form\u0026gt; fieldset labelu0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Payment form example\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; h1 { margin-top: 0; } ul { margin: 0; padding: 0; list-style: none; } form { margin: 0 auto; width: 400px; padding: 1em; border: 1px solid #CCC; border-radius: 1em; } div+div { margin-top: 1em; } label span { display: inline-block; width: 120px; text-align: right; } input, textarea { font: 1em sans-serif; width: 250px; box-sizing: border-box; border: 1px solid #999; } input[type=checkbox], input[type=radio] { width: auto; border: none; } input:focus, textarea:focus { border-color: #000; } textarea { vertical-align: top; height: 5em; resize: vertical; } fieldset { width: 250px; box-sizing: border-box; margin-left: 136px; border: 1px solid #999; } button { margin: 20px 0 0 124px; } label { position: relative; } label em { position: absolute; right: 5px; top: 20px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Payment form\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Required fields are followed by \u0026lt;strong\u0026gt;\u0026lt;abbr title=\u0026#34;required\u0026#34;\u0026gt;*\u0026lt;/abbr\u0026gt;\u0026lt;/strong\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;Contact information\u0026lt;/h2\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Title\u0026lt;/legend\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;title_1\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;title_1\u0026#34; name=\u0026#34;title\u0026#34; value=\u0026#34;A\u0026#34;\u0026gt; Ace \u0026lt;/label\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;title_2\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;title_2\u0026#34; name=\u0026#34;title\u0026#34; value=\u0026#34;K\u0026#34;\u0026gt; King \u0026lt;/label\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;title_3\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;title_3\u0026#34; name=\u0026#34;title\u0026#34; value=\u0026#34;Q\u0026#34;\u0026gt; Queen \u0026lt;/label\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;span\u0026gt;Name: \u0026lt;/span\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;abbr title=\u0026#34;required\u0026#34;\u0026gt;*\u0026lt;/abbr\u0026gt;\u0026lt;/strong\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;mail\u0026#34;\u0026gt; \u0026lt;span\u0026gt;E-mail: \u0026lt;/span\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;abbr title=\u0026#34;required\u0026#34;\u0026gt;*\u0026lt;/abbr\u0026gt;\u0026lt;/strong\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;mail\u0026#34; name=\u0026#34;usermail\u0026#34;\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;pwd\u0026#34;\u0026gt; \u0026lt;span\u0026gt;Password: \u0026lt;/span\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;abbr title=\u0026#34;required\u0026#34;\u0026gt;*\u0026lt;/abbr\u0026gt;\u0026lt;/strong\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pwd\u0026#34; name=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;Payment information\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;span\u0026gt;Card type:\u0026lt;/span\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;card\u0026#34; name=\u0026#34;usercard\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;visa\u0026#34;\u0026gt;Visa\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;mc\u0026#34;\u0026gt;Mastercard\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;amex\u0026#34;\u0026gt;American Express\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;number\u0026#34;\u0026gt; \u0026lt;span\u0026gt;Card number:\u0026lt;/span\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;abbr title=\u0026#34;required\u0026#34;\u0026gt;*\u0026lt;/abbr\u0026gt;\u0026lt;/strong\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;tel\u0026#34; id=\u0026#34;number\u0026#34; name=\u0026#34;cardnumber\u0026#34;\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;date\u0026#34;\u0026gt; \u0026lt;span\u0026gt;Expiration date:\u0026lt;/span\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;abbr title=\u0026#34;required\u0026#34;\u0026gt;*\u0026lt;/abbr\u0026gt;\u0026lt;/strong\u0026gt; \u0026lt;em\u0026gt;formatted as mm/dd/yyyy\u0026lt;/em\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;date\u0026#34; id=\u0026#34;date\u0026#34; name=\u0026#34;expiration\u0026#34;\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section\u0026gt; \u0026lt;p\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Validate the payment\u0026lt;/button\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; # 4.1.4 表单控件 # 4.1.4.1 通用属性 autofocus(false) 文档中只有一个与表单相关的元素可以指定具有输入焦点。 disabled(false) 用户不能与元素交互。 form name value # 4.1.4.2 文本输入 https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input\n通用属性 readonly placeholder size 单行文本框 \u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;comment\u0026quot; name=\u0026quot;comment\u0026quot; value=\u0026quot;I'm a text field\u0026quot;\u0026gt; Email地址框 \u0026lt;input type=\u0026quot;email\u0026quot; id=\u0026quot;email\u0026quot; name=\u0026quot;email\u0026quot; multiple\u0026gt; 密码框 \u0026lt;input type=\u0026quot;password\u0026quot; id=\u0026quot;pswd\u0026quot; name=\u0026quot;pswd\u0026quot;\u0026gt; 搜索框 \u0026lt;input type=\u0026quot;search\u0026quot; id=\u0026quot;search\u0026quot; name=\u0026quot;search\u0026quot;\u0026gt; 电话号码 \u0026lt;input type=\u0026quot;tel\u0026quot; id=\u0026quot;tel\u0026quot; name=\u0026quot;tel\u0026quot;\u0026gt; URL \u0026lt;input type=\u0026quot;url\u0026quot; id=\u0026quot;url\u0026quot; name=\u0026quot;url\u0026quot;\u0026gt; 多行文本框 \u0026lt;textarea cols=\u0026quot;30\u0026quot; rows=\u0026quot;10\u0026quot;\u0026gt;\u0026lt;/textarea\u0026gt; cols rows wrap # 4.1.4.3 下拉内容 https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select\n单选择框 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;select id=\u0026#34;groups\u0026#34; name=\u0026#34;groups\u0026#34;\u0026gt; \u0026lt;optgroup label=\u0026#34;fruits\u0026#34;\u0026gt; \u0026lt;option\u0026gt;Banana\u0026lt;/option\u0026gt; \u0026lt;option selected\u0026gt;Cherry\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Lemon\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;optgroup label= \u0026#34;vagetables\u0026#34;\u0026gt; \u0026lt;option\u0026gt;Carrot\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Eggplant\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Potato\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;/select\u0026gt; 多选择框 1 2 3 4 5 \u0026lt;select multiple id=\u0026#34;multi\u0026#34; name=\u0026#34;multi\u0026#34;\u0026gt; \u0026lt;option\u0026gt;Banana\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Cherry\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Lemon\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; 自动补全输入框 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;label for=\u0026#34;myFruit\u0026#34;\u0026gt;What\u0026#39;s your favorite fruit?\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;myFruit\u0026#34; id=\u0026#34;myFruit\u0026#34; list=\u0026#34;mySuggestion\u0026#34;\u0026gt; \u0026lt;datalist id=\u0026#34;mySuggestion\u0026#34;\u0026gt; \u0026lt;option\u0026gt;Apple\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Banana\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Blackberry\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Blueberry\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Lemon\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Lychee\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Peach\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;Pear\u0026lt;/option\u0026gt; \u0026lt;/datalist\u0026gt; # 4.1.4.4 可选中项 单选 \u0026lt;input type=\u0026quot;radio\u0026quot; checked id=\u0026quot;soup\u0026quot; name=\u0026quot;meal\u0026quot;\u0026gt;\n复选 \u0026lt;input type=\u0026quot;checkbox\u0026quot; checked id=\u0026quot;carrots\u0026quot; name=\u0026quot;carrots\u0026quot; value=\u0026quot;carrots\u0026quot;\u0026gt;\n# 4.1.4.5 按钮 Submit Reset Anonymous # 4.1.4.6 高级表单部件 数字 \u0026lt;input type=\u0026quot;number\u0026quot; name=\u0026quot;age\u0026quot; id=\u0026quot;age\u0026quot; min=\u0026quot;1\u0026quot; max=\u0026quot;10\u0026quot; step=\u0026quot;2\u0026quot;\u0026gt; -滑块 \u0026lt;input type=\u0026quot;range\u0026quot; name=\u0026quot;beans\u0026quot; id=\u0026quot;beans\u0026quot; min=\u0026quot;0\u0026quot; max=\u0026quot;500\u0026quot; step=\u0026quot;10\u0026quot;\u0026gt;\n日期时间\n本地时间\u0026lt;input type=\u0026quot;datetime-local\u0026quot; name=\u0026quot;datetime\u0026quot; id=\u0026quot;datetime\u0026quot;\u0026gt; 月\u0026lt;input type=\u0026quot;month\u0026quot; name=\u0026quot;month\u0026quot; id=\u0026quot;month\u0026quot;\u0026gt; 时间\u0026lt;input type=\u0026quot;time\u0026quot; name=\u0026quot;time\u0026quot; id=\u0026quot;time\u0026quot;\u0026gt; 星期\u0026lt;input type=\u0026quot;week\u0026quot; name=\u0026quot;week\u0026quot; id=\u0026quot;week\u0026quot;\u0026gt; 拾色器 \u0026lt;input type=\u0026quot;color\u0026quot; name=\u0026quot;color\u0026quot; id=\u0026quot;color\u0026quot;\u0026gt;\n# 4.1.4.7 其他小部件 文件选择器 \u0026lt;input type=\u0026quot;file\u0026quot; name=\u0026quot;file\u0026quot; id=\u0026quot;file\u0026quot; accept=\u0026quot;image/*\u0026quot; multiple\u0026gt; 隐藏内容 \u0026lt;input type=\u0026quot;hidden\u0026quot; id=\u0026quot;timestamp\u0026quot; name=\u0026quot;timestamp\u0026quot; value=\u0026quot;1286705410\u0026quot;\u0026gt; 图像按钮 \u0026lt;input type=\u0026quot;image\u0026quot; alt=\u0026quot;Click me!\u0026quot; src=\u0026quot;my-img.png\u0026quot; width=\u0026quot;80\u0026quot; height=\u0026quot;30\u0026quot; /\u0026gt; 仪表和进度条 进度条 \u0026lt;progress max=\u0026quot;100\u0026quot; value=\u0026quot;75\u0026quot;\u0026gt;75/100\u0026lt;/progress\u0026gt; 仪表 \u0026lt;meter min=\u0026quot;0\u0026quot; max=\u0026quot;100\u0026quot; value=\u0026quot;75\u0026quot; low=\u0026quot;33\u0026quot; high=\u0026quot;66\u0026quot; optimum=\u0026quot;50\u0026quot;\u0026gt;75\u0026lt;/meter\u0026gt; # 4.1.5 HTML5的表单 # 4.1.6 其他表单 # 4.1.7 样式化表单 # 4.1.7.1 基本样式美化 Search字段 1 2 3 4 5 input[type=search]{ border: 1px dotted #999; border-radius: 0; -webkit-appearance: none; } 1 2 3 \u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;search\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 字体和文本 1 2 3 4 button, input, select, textarea{ font-family: inherit; font-size: 100%; } 盒子模型 1 2 3 4 5 6 7 8 button, input, select, textarea{ width: 150px; margin: 0; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; } 定位 legend textarea 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;style\u0026gt; legend { width: 1px; height: 1px; overflow: hidden; } \u0026lt;/style\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;hi\u0026lt;/legend\u0026gt; \u0026lt;h1\u0026gt;hello\u0026lt;/h1\u0026gt; \u0026lt;/fieldset\u0026gt; 1 2 3 textarea { vertical-align: top; } # 4.1.7.2 实际案例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Postcard example\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; @font-face { font-family: \u0026#39;handwriting\u0026#39;; src: url(\u0026#39;fonts/journal-webfont.woff2\u0026#39;) format(\u0026#39;woff2\u0026#39;), url(\u0026#39;fonts/journal-webfont.woff\u0026#39;) format(\u0026#39;woff\u0026#39;); font-weight: normal; font-style: normal; } @font-face { font-family: \u0026#39;typewriter\u0026#39;; src: url(\u0026#39;fonts/veteran_typewriter-webfont.woff2\u0026#39;) format(\u0026#39;woff2\u0026#39;), url(\u0026#39;fonts/veteran_typewriter-webfont.woff\u0026#39;) format(\u0026#39;woff\u0026#39;); font-weight: normal; font-style: normal; } body { font: 1.3rem sans-serif; padding: 0.5em; margin: 0; background: #222; } form { position: relative; width: 740px; height: 498px; margin: 0 auto; padding: 1em; box-sizing: border-box; background: #FFF url(background.jpg); /* we create our grid */ display: grid; grid-gap: 20px; grid-template-columns: repeat(2, 1fr); grid-template-rows: 10em 1em 1em 1em; } h1 { font: 1em \u0026#34;typewriter\u0026#34;, monospace; align-self: end; } #message { grid-row: 1 / 5; } #from, #reply { display: flex; } label { font: .8em \u0026#34;typewriter\u0026#34;, sans-serif; } input, textarea { font: 1.4em/1.5em \u0026#34;handwriting\u0026#34;, cursive, sans-serif; border: none; padding: 0 10px; margin: 0; width: 80%; background: none; } input:focus, textarea:focus { background: rgba(0, 0, 0, .1); border-radius: 5px; } textarea { display: block; padding: 10px; margin: 10px 0 0 -10px; width: 100%; height: 90%; border-right: 1px solid; /* resize : none; */ overflow: auto; } button { padding: 5px; font: bold .6em sans-serif; border: 2px solid #333; border-radius: 5px; background: none; cursor: pointer; transform: rotate(-1.5deg); } button:after { content: \u0026#34; \u0026gt;\u0026gt;\u0026gt;\u0026#34;; } button:hover, button:focus { outline: none; background: #000; color: #FFF; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form\u0026gt; \u0026lt;h1\u0026gt;to: Mozilla\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;from\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;from:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;user_name\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;reply\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;mail\u0026#34;\u0026gt;reply:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;mail\u0026#34; name=\u0026#34;user_email\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;message\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;msg\u0026#34;\u0026gt;Your message:\u0026lt;/label\u0026gt; \u0026lt;textarea id=\u0026#34;msg\u0026#34; name=\u0026#34;user_message\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;button\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Send your message\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; # 4.1.8 高级样式表单 # 4.1.8.1 CSS表现力 CSS 2.1\n:active :focus :hover CSS Selector Level 3\n:enabled :disabled :checked :indeterminate CSS Basic UI Level 3\n:default :valid :invalid :in-range :out-of-range :required :optional :read-only :read-write CSS Selector Level 4\n:user-error Mozilla CSS\n:-moz-placeholder :-moz-submit-invalid :-moz-ui-invalid :-moz-ui-valid WebKit CSS\n::-webkit-input-placeholder others Microsoft CSS\n:-ms-input-placeholder # 4.1.8.2 案例 复选框和单选框 # 4.1.9 UI伪类 # 4.1.10 客户端表单验证 # 4.1.10.1 什么是表单数据校验 客户端校验 HTML5内置校验 JavaScript校验 服务器端校验 # 4.1.10.2 HTML5内置表单校验 Input元素的校校验 Input元素required属性 正则表达式校验 限制输入长度maxlength/minlength 自定义错误信息(javascript) # 4.1.10.3 JavaScript校验表单 支持约束校验API的表单元素 HTMLButtonElement HTMLFieldSetElement HTMLInputElement HTMLOutputElement HTMLSelectElement HTMLTextAreaElement 约束校验API的属性 validationMessage validity validity.customError validity.patternMismatch validity.rageOverflow validity.rageUnderflow validity.stepMismatch validity.tooLong validity.typeMismatch validity.valid validity.valueMissing willValidate 约束校验API的方法 checkValidity() HTMLFormElement.reportValidity() setCustomValidity(message) 使用约束校验API的例子 # 4.1.11 发送表单数据 https://developer.mozilla.org/zh-CN/docs/Learn/Forms/Sending_and_retrieving_form_data\n# 4.1.11.1 数据都去那儿了 客户端/服务器体系结构 客户端定义如何发送数据 action=\u0026ldquo;http://example.com/action\" method GET(get-method.html) POST(post-method.html) 浏览器里查看HTTP请求 服务端如何检索数据 PHP(php-example.html) Python(python-example.py) 其他语言和框架 Django for Python Express for Node.js Laravel for PHP Ruby On Rails for Ruby Phoenix for Elixir # 4.1.11.2 发送文件 method get enctype multipart/form-data # 4.1.11.3 安全问题 XSS CSRF\nSQL 注入\nHTPP数据头注入\n电子邮件注入\n# 4.2 Web表单进阶 # 4.2.1 构造自定义表单控件 # 4.2.1.1 设计、结构、和语义 重建Select元素 定义语义化的HTML结构 使用CSS创建外观 所需的样式 美化 # 4.2.1.2 通过JavaScript让您的小部件动起来 为什么不生效 浏览器关掉了JavaScript 脚本没有加载 脚本出现问题 脚本与浏览器的扩展冲突 浏览器老旧不支持新功能 让工作更简单 classList addEventListener forEach querySelector querySelectorAll 构造事件回调 处理组件的值 # 4.2.1.3 可访问性 # 4.2.2 使用Javascript发送表单 # 4.2.2.1 表单不总是表单 获得整体界面的控制 表单和AJAX的区别 # 4.2.2.2 发送表单数据 构建XMLHttpRequest FormDATA Object 使用FormData对象 使用绑定到表单元素上的FormData 在隐藏的iframe中构建DOM # 4.2.2.3 处理二进制 # 4.2.3 表单组件兼容性列表 # 4.2.3.1 如何阅读表格 # 4.2.3.2 兼容性表格 ","date":"2021-06-23T10:43:28+08:00","permalink":"https://tsinling.org/p/mdn-html-form/","title":"Mdn Html Form"},{"content":" # 3 JAVASCRIPT https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript\n# 3.1 First Steps # 3.1.1 概述 # 3.1.2 什么是javascript # 3.1.2.1 javascript定义 javascript是一种脚本，一门编程语言，它可以在网页上实现复杂的功能，网页展现给你的不在是简单的静态信息，而是实时的内容更新，交互式的地图，2D/3D动画，滚动播放的视频等等。\nHTML是一种标记语言，用来结构化我们的网页内容并赋予内容含义，例如定义段落、标题和数据表，或在页面中嵌入图片和视频。 CSS 是一种样式规则语言，可将样式应用于 HTML 内容， 例如设置背景颜色和字体，在多个列中布局内容。 JavaScript 是一种脚本语言，可以用来创建动态更新的内容，控制多媒体，制作图像动画，还有很多。 # 3.1.2.2 javascript可以做什么 javascript api分类\n浏览器api，内建与web浏览器，他们可以将数据从周边计算机环境中筛选出来，还可以做复杂的工作。 Document Object Model API 能通过创建、移除和修改HTML，为页面动态应用咸阳市等手段来操作HTML和CSS。 Geolocation API 获取地理信息。 Canvas/WebGL API 可以创建生动的2D和3D图像。 audio/video API 可以i利用多媒体做一些非常有趣的事。 第三方api Weibo API Twitter API GoogleMap API AMap API # 3.1.2.3 javascript在页面上做了什么 浏览器安全 JavaScript运行次序 解释代码VS编译代码 服务端VS客户端 动态代码VS静态代码 # 3.1.2.4 向页面添加JavaScript css使用\u0026lt;link\u0026gt;元素链接外部样式表，使用\u0026lt;style\u0026gt;元素向HTML嵌入内部样式表，javascript这里只需要一个元素\u0026lt;script\u0026gt;。\n内部javascript 外部javascript 内联javascript 脚本调用策略 async和defer # 3.1.2.5 注释 1 2 3 4 5 6 //我是一行注释 /* 我是多行注释 我是多行注释 */ # 3.1.3 Javascript初体验 # 3.1.3.1 像程序员一样思考 # 3.1.3.2 猜数字游戏 初始设置 添加变量 函数 运算符 条件语句 事件 Event Listener Event Handler 补全代码 循环 对象 浏览器对象 # 3.1.3.3 大功告成 https://roy-tian.github.io/learning-area/javascript/introduction-to-js-1/first-splash/number-guessing-game.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;猜数字游戏\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; html { font-family: sans-serif; } body { width: 50%; max-width: 800px; min-width: 480px; margin: 0 auto; } .lastResult { color: white; padding: 3px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;猜数字游戏\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;我刚才随机选定了一个100以内的自然数。看你能否在 10 次以内猜中它。每次我都会告诉你所猜的结果是高了还是低了。\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;guessField\u0026#34;\u0026gt;请猜数：\u0026lt;/label\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;guessField\u0026#34; class=\u0026#34;guessField\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;我猜\u0026#34; class=\u0026#34;guessSubmit\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;resultParas\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;guesses\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;lastResult\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;lowOrHi\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; let randomNumber = Math.floor(Math.random() * 100) + 1; const guesses = document.querySelector(\u0026#39;.guesses\u0026#39;); const lastResult = document.querySelector(\u0026#39;.lastResult\u0026#39;); const lowOrHi = document.querySelector(\u0026#39;.lowOrHi\u0026#39;); const guessSubmit = document.querySelector(\u0026#39;.guessSubmit\u0026#39;); const guessField = document.querySelector(\u0026#39;.guessField\u0026#39;); let guessCount = 1; let resetButton; function checkGuess() { let userGuess = Number(guessField.value); if (guessCount === 1) { guesses.textContent = \u0026#39;上次猜的数：\u0026#39;; } guesses.textContent += userGuess + \u0026#39; \u0026#39;; if (userGuess === randomNumber) { lastResult.textContent = \u0026#39;恭喜你！猜对了！\u0026#39;; lastResult.style.backgroundColor = \u0026#39;green\u0026#39;; lowOrHi.textContent = \u0026#39;\u0026#39;; setGameOver(); } else if (guessCount === 10) { lastResult.textContent = \u0026#39;!!!游戏结束!!!\u0026#39;; lowOrHi.textContent = \u0026#39;\u0026#39;; setGameOver(); } else { lastResult.textContent = \u0026#39;你猜错了！\u0026#39;; lastResult.style.backgroundColor = \u0026#39;red\u0026#39;; if (userGuess \u0026lt; randomNumber) { lowOrHi.textContent = \u0026#39;你刚才猜低了！\u0026#39;; } else if (userGuess \u0026gt; randomNumber) { lowOrHi.textContent = \u0026#39;你刚才猜高了！\u0026#39;; } } guessCount++; guessField.value = \u0026#39;\u0026#39;; guessField.focus(); } guessSubmit.addEventListener(\u0026#39;click\u0026#39;, checkGuess); function setGameOver() { guessField.disabled = true; guessSubmit.disabled = true; resetButton = document.createElement(\u0026#39;button\u0026#39;); resetButton.textContent = \u0026#39;开始新游戏\u0026#39;; document.body.appendChild(resetButton); resetButton.addEventListener(\u0026#39;click\u0026#39;, resetGame); } function resetGame() { guessCount = 1; const resetParas = document.querySelectorAll(\u0026#39;.resultParas p\u0026#39;); for (let i = 0; i \u0026lt; resetParas.length; i++) { resetParas[i].textContent = \u0026#39;\u0026#39;; } resetButton.parentNode.removeChild(resetButton); guessField.disabled = false; guessSubmit.disabled = false; guessField.value = \u0026#39;\u0026#39;; guessField.focus(); lastResult.style.backgroundColor = \u0026#39;white\u0026#39;; randomNumber = Math.floor(Math.random() * 100) + 1; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; # 3.1.4 Javascript代码的错误 # 3.1.4.1 错误类型 语法错误 逻辑错误 其他错误 # 3.1.4.2 出错的示例 # 3.1.4.3 修复语法错误 # 3.1.5 变量 # 3.1.5.1 声明变量 # 3.1.5.2 初始化变量 # 3.1.5.3 var与let的区别 # 3.1.5.4 更新变量 # 3.1.5.5 变量类型 Number String Boolean Array Object # 3.1.5.6 动态类型 # 3.1.6 数字与运算符 # 3.1.6.1 数字 Number 整数 浮点数 双精度 进制 二进制 八进制 十六进制 # 3.1.6.2 算术运算符 加法(+) 减法(-) 乘法(*) 除法(/) 求余(%) 幂(**) # 3.1.6.3 自增和自减 自增(++) 自减(\u0026ndash;) # 3.1.6.4 赋值运算符 加法赋值(+=) 减法赋值(-=) 乘法赋值(*=) 除法赋值(/=) # 3.1.6.5 比较运算符 严格等于(===) 严格不等于(!==) 小于(\u0026lt;) 大于(\u0026gt;) 小于等于(\u0026lt;=) 大于等于(\u0026gt;=) # 3.1.7 字符串 # 3.1.7.1 基本知识 单引号和双引号 转义字符(\\) # 3.1.7.2 连接字符串 # 3.1.8 有用的字符串方法 # 3.1.8.1 字符串当对象 字符串长度(length) 检索字符 查找子串(indexOf) 大小写(toLowerCase)(toUpperCase) 替换字符串(replace) # 3.1.9 数组 # 3.1.9.1 什么是数组 # 3.1.9.2 有用的方法 字符串和数组转换 split join toString 添加删除数组项 unshift shift push pop # 3.1.10 笑话生成器 # 3.2 Javascript基础要件 # 3.2.1 基础要件概述 # 3.2.2 条件语句 # 3.2.3 代码循环 # 3.2.4 函数 # 3.2.5 建立自己的函数 # 3.2.5 函数返回值 # 3.2.6 事件介绍 在web中，事件在浏览器窗口中被触发并且通常被绑定到窗口内部的特定部分。\n# 3.2.6.1 事件举例 用户在某个元素上点击鼠标或者悬停光标。 用户在键盘按下某个按键。 用户调整浏览器的大小或关闭浏览器。 页面停止加载。 提交表单。 播放、暂停、关闭视频。 发生错误。 等\u0026hellip; # 3.2.6.2 使用事件 事件处理器属性 行内事件处理器 addEventListener removeEventListener # 3.2.6.2 其他事件概念 事件对象 阻止默认行为 事件冒泡及捕获 # 3.3 Javascript对象介绍 # 3.3.1 对象概述 # 3.3.2 对象基础概念 # 3.3.3 适合新手的javascript # 3.3.4 对象原型 # 3.3.5 继承 # 3.3.6 JSON # 3.3.7 对象构建实践 # 3.4 异步Javascript # 3.4.1 异步概述 # 3.4.2 异步编程概念 # 3.4.3 异步JavaScript简介 # 3.4.4 超时和间隔 # 3.4.5 优雅的异步处理 # 3.4.6 async和await # 3.4.7 选择正确的方法 # 3.5 客户端网页API # 3.5.1 网页API介绍 # 3.5.2 操纵文档 # 3.5.3 从服务器获取数据 # 3.5.4 第三方API # 3.5.5 画图 # 3.5.6 视频与音频 # 3.5.7 客户端存储 ","date":"2021-06-15T09:24:52+08:00","permalink":"https://tsinling.org/p/mdn-javascript/","title":"MDN Javascript"},{"content":" # 2 CSS # 2.1 CSS第一步 # 2.1.1 CSS概述 # 2.1.2 什么是CSS CSS(层叠样式表)是用来指定文档如何展示给用户的一门语言，如网页的样式、布局、等等。\nCSS可以用于给文档添加样式，比如改变标题和链接的颜色及大小。它也可以用于创建布局，比如将一个单列文本变成包含主要内容区域和存放相关信息的侧边栏区域的布局。他甚至还可以用来做一些特效，比如动画。\n# 2.1.3 CSS入门 index.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;开始学习CSS\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;我是一级标题\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;special\u0026#34;\u0026gt;这是一个段落文本. 在文本中有一个 \u0026lt;span class=\u0026#34;special\u0026#34;\u0026gt;span element\u0026lt;/span\u0026gt;并且还有一个 \u0026lt;a href=\u0026#34;http://example.com\u0026#34;\u0026gt;链接\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;这是第二段. 包含了一个 \u0026lt;em\u0026gt;强调\u0026lt;/em\u0026gt; 元素.\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;项目1\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;special\u0026#34;\u0026gt;项目2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;项目 \u0026lt;em\u0026gt;三\u0026lt;/em\u0026gt;hello\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; styles.css\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 h1 { color: red; } p { color:green; } li { color:green; list-style-type: style; } li.special, span.special { color: orange; font-weight: bold; } li em{ color: rebeccapurple; } h1 + p{ font-size: 200%; } a:link{ color:pink; } a.visited{ color:green; } a.hover{ text-decoration: none; } body h1+p.special{ color:yellow; background-color:black; padding:5px; } # 2.1.4 如何构建 \u0026lt;link\u0026gt;外部样式 index.html\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;My CSS experiment\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is my first CSS example\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; styles.css\n1 2 3 4 5 6 7 8 9 h1 { color: blue; background-color: yellow; border: 1px solid black; } p { color: red; } 内部样式 index.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;My CSS experiment\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; h1 { color: blue; background-color: yellow; border: 1px solid black; } p { color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is my first CSS example\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 内联样式 index.html\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;My CSS experiment\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1 style=\u0026#34;color: blue;background-color: yellow;border: 1px solid black;\u0026#34;\u0026gt;Hello World!\u0026lt;/h1\u0026gt; \u0026lt;p style=\u0026#34;color:red;\u0026#34;\u0026gt;This is my first CSS example\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 选择器属性和值 # 2.1.5 如何运行 当浏览器展示一个文件的时候，处理文件的基本流程。\n浏览器载入HTML 浏览器把HTML转化成DOM(Document Object Model) 浏览器拉取HTML相关资源，比如图片、CSS样式、视频。 浏览器拉取到CSS后会进行解析，根据不同的类型(element、class、id等)把他们分到不同的桶中。\n浏览器找到不同的选择器，将不同的规则应用在对应的DOM节点，并添加节点依赖的样式(这个中间步骤称为渲染树)。 渲染树会依照该出现的结构进行布局。 网页展示在屏幕上(这一步被称为着色)。 # 2.2 CSS构建基础 # 2.2.1 CCS构建基础概览 # 2.2.2 层叠与继承 冲突规则\n元素选择器按顺序总是最后的规则生效 类选择器优先级高于元素选择器 理解继承\n控制继承 inherit initial unset 重设所有属性值(unset) 理解层叠\n资源顺序(相同权重的多个规则，后面的规则覆盖前面的规则) 优先级从高到低 声明在style的属性(内联样式) ID选择器 类选择器 元素选择器 重要程度(!improtant能够覆盖所有优先级的计算) CSS位置的影响\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 冲突规则 --\u0026gt; \u0026lt;h1 class=\u0026#34;main-heading\u0026#34;\u0026gt;CSS 冲突规则\u0026lt;/h1\u0026gt; \u0026lt;!-- 继承 --\u0026gt; \u0026lt;p\u0026gt;hello \u0026lt;span\u0026gt;world!\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- 理解继承 --\u0026gt; \u0026lt;ul class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;li\u0026gt;item One\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;item Two \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;2.1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;2.2\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;item Three \u0026lt;ul class=\u0026#34;special\u0026#34;\u0026gt; \u0026lt;li\u0026gt;3.1 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;3.1.1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;3.1.2\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;3.2\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;!-- 控制继承 --\u0026gt; \u0026lt;ul class=\u0026#34;my-class\u0026#34;\u0026gt; \u0026lt;li\u0026gt;Default \u0026lt;a href=\u0026#34;http://example.com\u0026#34;\u0026gt;link\u0026lt;/a\u0026gt; color\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;my-class-1\u0026#34;\u0026gt;inherit the \u0026lt;a href=\u0026#34;http://example.com\u0026#34;\u0026gt;link\u0026lt;/a\u0026gt; color\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;my-class-2\u0026#34;\u0026gt;Reset the \u0026lt;a href=\u0026#34;http://example.com\u0026#34;\u0026gt;link\u0026lt;/a\u0026gt; color\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;my-class-3\u0026#34;\u0026gt;Unset the \u0026lt;a href=\u0026#34;http://example.com\u0026#34;\u0026gt;link\u0026lt;/a\u0026gt; color\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;!-- 重设所有值 --\u0026gt; \u0026lt;blockquote\u0026gt;\u0026lt;p\u0026gt;This blockquote is styled\u0026lt;/p\u0026gt;\u0026lt;/blockquote\u0026gt; \u0026lt;blockquote class=\u0026#34;fix-this\u0026#34;\u0026gt;\u0026lt;p\u0026gt;This blockquote is styled\u0026lt;/p\u0026gt;\u0026lt;/blockquote\u0026gt; \u0026lt;!-- 理解层叠 --\u0026gt; \u0026lt;div id=\u0026#34;outer\u0026#34; class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;inner\u0026#34; class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;nav\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;One\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Two\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 重要性 --\u0026gt; \u0026lt;p class=\u0026#34;better\u0026#34;\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;better\u0026#34; id=\u0026#34;winning\u0026#34;\u0026gt;One selector to rule them all!\u0026lt;/p\u0026gt; \u0026lt;!-- 主动学习 --\u0026gt; \u0026lt;div id=\u0026#34;outer2\u0026#34; class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;inner2\u0026#34; class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;nav2\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;One\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav2\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Two\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 h1.main-heading{ color:chartreuse; } h1 { color:red; } h1 { color:blue; } p{ color:blue; } span{ color: blueviolet; } .main { color: rebeccapurple; border: 2px solid #ccc; padding: 1em; } .special{ color:black; font-weight: bold; } .my-class{ color:green; } .my-class-1{ color:inherit; } .my-class-2{ color:initial; } .my-class-3{ color:unset; } /* a { color:red; } */ blockquote{ background-color: red; border: 2px solid green; } .fix-this{ all: unset; } #outer a { background-color: red; } #outer #inner a { background-color: blue; } #outer div ul li a { color: yellow; } #outer div ul .nav a { color: white; } div div li:nth-child(2) a:hover { border:10px solid black; } div li:nth-child(2) a:hover { border: 10px dashed black; } div div .nav:nth-child(2) a:hover { border: 10px double black; } a { display: inline-block; line-height: 40px; font-size: 20px; text-decoration: none; text-align: center; width: 200px; margin-bottom: 10px; } ul { padding: 0; } li { list-style-type: none; } #winning { background-color: red; border: 1px solid black; color: white; padding: 5px; } .better { background-color: gray; border: none !important; color: white; padding: 5px; } #inner2 .nav2 a { color: yellow; background-color: blue; padding: 5px; display: inline-block; margin-bottom: 10px; } # 2.2.3 CSS选择器 类型、类和ID选择器\n类型选择器也叫“标签名选择器”或者是“元素选择器”，因为它在文档中选择了一个HTML标签/元素。 全局选择器由一个星号(*)代指，他选中了文档中的所有内容。 类选择器以一个句点(.)开头，会选择文档中应用了这个类的所有物件。 指定向特定元素的类。 多个类被应用的时候指向一个元素。 ID选择器由#开头，用法类似类选择器。 属性选择器(选定带有特定属性的元素)\n存否和值选择器。 子字符串匹配选择器。 大小写敏感。 伪类和伪元素\n伪类是添加到选择器的关键字，指定要选择元素的特殊状态。 :first-child :last-child :only-child :invalid 用户行为伪类 :focus(用户使用键盘选定元素时激活) :hover(用户将移指针到元素上的时候才会激活) 伪元素是一个附加至选择器末的关键字，允许你对元素的特定部分修改样式。 ::first-line ::before ::after 关系选择器\n后代选择器(“空格”) 子代关系选择器(“\u0026gt;”只作用一代更远的后代不会生效) 邻接兄弟选择器(+) 通用兄弟选择器(~) selector test 1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=`, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;2.2 selector test 1\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* 使一级标题的字体颜色为蓝色 使二级标题有一个蓝色背景且白色文本。 使跨距中换行的文本的字体大小为200%。 */ .container h1 { color: blue; } .container h2 { color: white; background-color: blue; } .container span { font-size: 200%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;This is a heading\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Veggies es \u0026lt;span\u0026gt;bonus vobis\u0026lt;/span\u0026gt;, proinde vos postulo essum magis kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;A level 2 heading\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; selector test 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=`, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;2.2 selector test 2\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* 让id为 special 的元素有一个黄色背景。 让使用类 alert 的元素有一个 1px 的灰色边框。 如果一个元素使用了 alert 类还有 stop类， 让它的背景变为红色。 如果一个元素使用 alert 类还有 go类，让它的背景变为绿色。 */ #special { background-color: yellow; } .alert { border: 1px solid gray; } .alert.stop { background-color: red; } .alert.go { background-color: green; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;This is a heading\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Veggies es \u0026lt;span class=\u0026#34;alert\u0026#34;\u0026gt;bonus vobis\u0026lt;/span\u0026gt;, proinde vos postulo \u0026lt;span class=\u0026#34;alert stop\u0026#34;\u0026gt;essum magis\u0026lt;/span\u0026gt; kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.\u0026lt;/p\u0026gt; \u0026lt;h2 id=\u0026#34;special\u0026#34;\u0026gt;A level 2 heading\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Gumbo beet greens corn soko endive gumbo gourd.\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;Another level 2 heading\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;\u0026lt;span class=\u0026#34;alert go\u0026#34;\u0026gt;Parsley shallot\u0026lt;/span\u0026gt; courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; selector test 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=`, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;2.2 selector test 3\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* 链接文本的样式：使链接为橘色，被访问后变为绿色，当被hover时，移除链接文本的下划线。 让容器里的第一个元素的字体大小为:150%，并且让这个元素的第一行是红色的。 让表格中每隔一行条带化，分别给它们一个颜色为#333的背景和一个白色前景。 */ a { color: orange; } a:visited { color: green; } a:hover { text-decoration-line: none; } .container p:first-child { font-size: 150%; } .container p:first-child::first-line { color: red; } div table tr:nth-of-type(2n) { color: white; background-color: #333; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Veggies es \u0026lt;a href=\u0026#34;http://example.com\u0026#34;\u0026gt;bonus vobis\u0026lt;/a\u0026gt;, proinde vos postulo essum magis kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.\u0026lt;/p\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Fruits\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Vegetables\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Apple\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Potato\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Orange\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Carrot\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Tomato\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Parsnip\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Kiwi\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Onion\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Banana\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Beet\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; selector test 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=`, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;2.2 selector test 4\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* 让任何直接跟随二级标题的段落颜色为红色。 移除使用了list类的无序列表的儿子元素前面的原点并给他们添加一个1px的灰色下边框。 */ h2+p { color: red; } .list\u0026gt;li { list-style-type: none; border-width: 1px; border-color: gray; border-style: none none solid none; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;This is a heading\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This paragraph comes after the heading.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;This is the second paragraph.\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;Another heading\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This paragraph comes after the heading.\u0026lt;/p\u0026gt; \u0026lt;ul class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;li\u0026gt;One\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Two \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;2.1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;2.2\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Three\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; selector test 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=`, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;2.2 selector test 5\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* Target the \u0026lt;a\u0026gt; element with a title attribute and make the border pink (border-color: pink). Target the \u0026lt;a\u0026gt; element with an href attribute that contains the word contact somewhere in its value and make the border orange (border-color: orange). Target the \u0026lt;a\u0026gt; element with an href value starting with https and give it a green border (border-color: green). */ a { border: 5px solid grey; } .test1 { border-color: pink; } .test2 { border-color: orange; } .test3 { border-color: green; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a class=\u0026#34;test1\u0026#34; href=\u0026#34;htttp://example.com\u0026#34; title=\u0026#34;example.com\u0026#34;\u0026gt;example.com\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a class=\u0026#34;test2\u0026#34; href=\u0026#34;mailto:mail@example.com\u0026#34;\u0026gt;mail@example.com\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a class=\u0026#34;test3\u0026#34; href=\u0026#34;htttps://example.com\u0026#34;\u0026gt;htttps://example.com\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; # 2.2.4 盒模型 网页上的区块(block)是指出现在新行上的HTML元素即在该元素的前一个元素的下方，在后一个元素的上方(通常称为块级元素)。\n比如HTML中的\u0026lt;p\u0026gt;元素默认是块级元素，而\u0026lt;a\u0026gt;元素是一个内联元素。\ndisplay属性可以设置元素的内部和外部显示类型。元素的外部显示类型决定该元素在流式布局中的表现(block or inline)；元素的内部显示类型控制子元素的布局。\n盒模型(box module) 块级盒子(block box) 盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，大多数情况下盒子和父容器一样宽。 每个盒子都会换行。 width和height属性有效。 内边距(padding)，外边距(margin)，和边框(border)会将其他元素从当前盒子周围“推开”。 比如标题\u0026lt;h1\u0026gt;和段落\u0026lt;p\u0026gt;在默认情况下都是块级盒子。 内联盒子(inline box) 盒子不会产生换行。 width和height属性无效。 垂直方向的内边距、外边距、边框会被应用，不会把其他处于inline状态的盒子推开。 水平方向的内边距、外边距、边框会被应用，且会把其他处于inline状态的盒子推开。 不同显示类型的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* block */ p, ul { border: 2px solid rebeccapurple; padding: .5em; } .block, li { border: 2px solid blue; padding: .5em; } ul { display: flex; list-style: none; } .block { display: block; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- body --\u0026gt; \u0026lt;p\u0026gt;I am a paragraph. A short one.\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Item One\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Item Two\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Item Three\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;p\u0026gt;I am another paragraph. Some of the \u0026lt;span class=\u0026#34;block\u0026#34;\u0026gt;words\u0026lt;/span\u0026gt; have been wrapped in a \u0026lt;span\u0026gt;span element\u0026lt;/span\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* inline */ p, ul { border: 2px solid rebeccapurple; } span, li { border: 2px solid blue; } ul { display: inline-flex; list-style: none; padding: 0; } .inline { display: inline; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- body --\u0026gt; \u0026lt;p\u0026gt; I am a paragraph. Some of the \u0026lt;span\u0026gt;words\u0026lt;/span\u0026gt; have been wrapped in a \u0026lt;span\u0026gt;span element\u0026lt;/span\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Item One\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Item Two\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Item Three\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;p class=\u0026#34;inline\u0026#34;\u0026gt;I am a paragraph. A short one.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;inline\u0026#34;\u0026gt;I am another paragraph. Also a short one.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 盒模型的各个部分 Content box:这个区域用来显示内容，大小可以通过width和height设置。 Padding box:包围在内容外和边框内的空白区域；通过padding设置。 Boarder box:包围内容和内边框的区域；通过border设置。 Margin box:最外面的区域，是盒子和其他元素之间的空白区域。通过margin设置。 width: context width. height: context height. 标准盒模型和替代盒模型 1 2 3 4 5 6 html { box-sizing: border-box; } *, *::before, *::after { box-sizing: inherit; } 内边距，边框，外边距 padding padding-top padding-right padding-bottom padding-top border border-width border-style border-color border-top border-right border-bottom border-left border-top-width border-top-style border-top-color border-right-width border-right-style border-right-color border-bottom-width border-bottom-style border-bottom-color border-left-width border-left-style border-left-color margin margin-top margin-right margin-bottom margin-left inline-block width和height属性生效。 padding，border，margin会推开其他元素。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; span { margin: 20px; padding: 20px; width: 80px; height: 20px; background-color: lightblue; border: 2px solid blue; display: inline-block; } .links-list { display: flex; list-style-type: none; } .links-list a { display: inline-block; background-color: rgb(179, 57, 81); color: #fff; text-decoration: none; padding: 1em 2em; border: 1em solid #fff; } .links-list a:hover { background-color: rgb(66, 28, 40); color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- body --\u0026gt; \u0026lt;p\u0026gt; I am a paragraph and this is a \u0026lt;span\u0026gt;span\u0026lt;/span\u0026gt; inside that paragraph. A span is an inline element and so does not respect width and height. \u0026lt;/p\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul class=\u0026#34;links-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Link one\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Link two\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Link three\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; # 2.2.5 背景与边框 background background-color背景色扩展到元素的内容和内边距的下面。 background-image background-repeat background-size background-position background-attachment border border-radius 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* 给方框一个5px的黑色实心边框，圆角为10px。 添加一个背景图像(使用URL balloons.jpg)，并调整它的大小，使它能够覆盖盒子。 给\u0026lt;h2\u0026gt;一个半透明的黑色背景颜色，并使文本为白色。 */ .box { border: 5px solid black; border-radius: 10px; background-image: url(https://mdn.github.io/css-examples/learn/backgrounds-borders/balloons.jpg); background-size: contain; /* background-repeat: no-repeat; */ } h2 { /* background-color: black; */ background-image: linear-gradient(90deg, red, blue); color: white; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- body --\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Backgrounds \u0026amp; Borders\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; # 2.2.6 处理不同的文本方向 书写模式是指文本的排列方向是横向还是纵向。\nwriting-mode horizontal-tb(从上至下) vertical-rl(从右向左) vertical-lr(从左向右) 块级布局和内联布局\n水平书写模式 垂直书写模式 逻辑属性和逻辑值\n逻辑内边距、边框和外边框属性\n# 2.2.7 溢出的内容 overflow overflow:visible overflow:hidden overflow:scroll # 2.2.8 值和单位 https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Values_and_Units\n# 2.2.9 在CSS中调整大小 https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\n# 2.2.10 图片媒体和表单元素 https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Images_media_form_elements\n# 2.2.11 样式化表格 # 2.2.12 调试CSS # 2.2.13 组织CSS # 2.3 样式化文本 # 2.3.1 样式化文字概述 # 2.3.2 基础文字与样式 用于样式文本的CSS属性分类： 字体样式 文本布局风格 字体属性 color font-family font-size px em rem font-style normal italic oblique font-weight normal, bold lighter, bolder font-transfrom none uppercase lowercase capitalize full-width text-decoration text-decoration-line text-decoration-color text-decoration-style text-shadow 文本布局 文本对齐 text-align left right center justify line-height letter-spacing word-spacing 其他有用的一些属性 font样式 font-variant font-kerning font-feature-settings font-variant-alternates font-variant-caps font-variant-east-asian font-variant-ligatures font-variant-numeric font-variant-position font-size-adjust font-stretch text-underline-postion text-rendering 布局样式 text-indent text-overflow white-space word-break direction hyphens line-break text-align-last text-orientation word-wrap writing-mode # 2.3.3 样式化列表 line-height list-style list-style-type list-style-position list-style-image start reversed value # 2.3.4 样式化链接 链接状态 link visited hover focus active # 2.3.4 web字体 @font-face font-family src font-style font-weight # 2.4 CSS layout # 2.4.1 layout概述 # 2.4.2 layout简介 Normal flow(display) Flexbox Grid Float Position 表格布局 多列布局 # 2.4.3 Normal flow 取得元素的内容来放在一个独立的元素盒子中，然后在其周边加上内边距、边框和外边距。就是之前练习过的盒子模型。\n块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。\n内联元素的高度和宽度与内容一致。内联元素的高宽无法设置，如果想要控制内联元素的尺寸，需要为元素设置display:block(或display:inline-block)。\n正常布局流是一套在浏览器视口内放置、组织元素的系统。默认的，块级元素按照基于父元素的书写顺序的块流动方向放置，每一个块元素会在上一个元素下面另起一行，他们会被设置好margin分割。内联元素则不会另起一行，只要在其父级块级元素的宽度内有足够的空间，它们与其他内联元素、相邻的文本内容被安排在同一行。如果空间不够，溢出的元素将移到新的一行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { width: 500px; margin: 0 auto; } p { background: rgba(255, 84, 104, 0.3); border: 2px solid rgb(255, 84, 104); padding: 10px; margin: 10px; } span { background: white; border: 1px solid black; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- body --\u0026gt; \u0026lt;h1\u0026gt;Basic document flow\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;I am a basic block level element. My adjacent block level elements sit on new lines below me.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;By default we span 100% of the width of our parent element, and we are as tall as our child content. Our total width and height is our content + padding + border width/height.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;We are separated by our margins. Because of margin collapsing, we are separated by the width of one of our margins, not both.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;inline elements \u0026lt;span\u0026gt;like this one\u0026lt;/span\u0026gt; and \u0026lt;span\u0026gt;this one\u0026lt;/span\u0026gt; sit on the same line as one another, and adjacent text nodes, if there is space on the same line. Overflowing inline elements will \u0026lt;span\u0026gt;wrap onto a new line if possible (like this one containing text)\u0026lt;/span\u0026gt;, or just go on to a new line if not, much like this image will do: \u0026lt;img src=\u0026#34;https://mdn.mozillademos.org/files/13360/long.jpg\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; # 2.4.4 Flexbox https://wiki.developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout\nflex模型 主轴(main axis, main start, main end) 交叉轴(cross axis, cross start, cross end) flex容器(flex container) flex项(flex item) flex-direction属性指定主轴(main axis)方向默认row row(default) row-reverse column column-reverse fles-wrap指定flex元素单行显示还是多行显示。如果允许换行，这个属性允许你控制行的堆叠方向。 nowrap(default)元素摆放到一行 wrap元素被打断到多个行 wrap-reverse flex-flow是flex-direction和flex-wrap的缩写。 1 2 flex-direction: row; flex-wrap: wrap; 1 flex-flow: row wrap; flex是一个可以指定最多三个不同值的缩写属性用来指定flex项的尺寸。\nflex-grow无单位比例。 flex-shrinkflex元素的收缩规则。 flex-basisflex元素在主轴上的初始大小。 align-items控制flex项在交叉轴上的位置。\nstretch center flex-start flex-end justify-content控制flex项在主轴上的位置。\nflex-start flex-end center space-around space-between order\n所有flex项默认order值是0 order值大的flex项比order值小的在显示顺序中更靠后。 相同order值的flex项按源顺序显示。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Flexbox 0 — starting code\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; html { font-family: sans-serif; } body { margin: 0; } header { background: purple; height: 100px; } h1 { text-align: center; color: white; line-height: 100px; margin: 0; } section { display: flex; flex-direction: row-reverse; } article { padding: 10px; margin: 10px; background: aqua; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Sample flexbox example\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;section\u0026gt; \u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;First article\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday carry vinyl typewriter. Tacos PBR\u0026amp;B pork belly, everyday carry ennui pickled sriracha normcore hashtag polaroid single-origin coffee cold-pressed. PBR\u0026amp;B tattooed trust fund twee, leggings salvia iPhone photo booth health goth gastropub hammock.\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;Second article\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday carry vinyl typewriter. Tacos PBR\u0026amp;B pork belly, everyday carry ennui pickled sriracha normcore hashtag polaroid single-origin coffee cold-pressed. PBR\u0026amp;B tattooed trust fund twee, leggings salvia iPhone photo booth health goth gastropub hammock.\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;Third article\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday carry vinyl typewriter. Tacos PBR\u0026amp;B pork belly, everyday carry ennui pickled sriracha normcore hashtag polaroid single-origin coffee cold-pressed. PBR\u0026amp;B tattooed trust fund twee, leggings salvia iPhone photo booth health goth gastropub hammock.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Cray food truck brunch, XOXO +1 keffiyeh pickled chambray waistcoat ennui. Organic small batch paleo 8-bit. Intelligentsia umami wayfarers pickled, asymmetrical kombucha letterpress kitsch leggings cold-pressed squid chartreuse put a bird on it. Listicle pickled man bun cornhole heirloom art party. \u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; # 4.4 Grid https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Grids\n网格是由一系列水平及垂直的线构成的一种布局模式。根据网格，我们能够将设计元素进行排列，帮助我们设计一系列具有固定位置以及宽度的元素的页面，使我们的网站页面更加统一。一个网格通常由列(column)与行(row)组成，列与列、行与行之间的间隙被称为沟槽(gutter)。\n# 4.5 Float https://developer.mozilla.org/zh-CN/docs/Web/CSS/float\n# 4.6 Position https://developer.mozilla.org/zh-CN/docs/Web/CSS/position\n# 4.7 Multi column https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Columns\n# 4.8 响应式布局 https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Responsive_Design\n# 4.9 媒体查询 https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Media_queries\n# 4.10 传统布局 https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\n# 4.11 支持旧浏览器 https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\n","date":"2021-06-02T07:17:50+08:00","permalink":"https://tsinling.org/p/mdn-css/","title":"Mdn CSS"},{"content":" # 1 HTML # 1.1 介绍 # 1.1.1 概述 1990 年，由于对 Web 未来发展的远见，Tim Berners-Lee 提出了 超文本 的概念，并在第二年在 SGML (en-US) 的基础上将其正式定义为一个标记语言。\n1993 年，IETF (en-US) 正式开始制定 HTML 规范，并在经历了几个版本的草案后于 1995 年发布了 HTML 2.0 版本。\n1994 年，Berners-Lee 为了 Web 发展而成立了 W3C (en-US)。\n1996 年，W3C 接管了 HTML 的标准化工作，并在1年后发布了 HTML 3.2 推荐标准。\n1999 年，HTML 4.0 发布，并在 2000 年成为 ISO (en-US) 标准。\n2008 年，两个组织（译注：即 W3C 和 WHATWG）发布了第一份草案。\n2014 年，两个组织（译注：即 W3C 和 WHATWG）发布了 HTML5 标准的最终版。\n# 1.1.2 入门 什么是HTML HTML 是一种相当简单的、由不同元素组成的标记语言。\nHTML不是一门编程语言，而是一种用来告知浏览器如何组织页面的标记语言。\nHTML由一系列的元素（elements）组成，每一个元素都用一对开始和结束标签(\u0026lt;\u0026gt;)包裹。每一个标签以尖括号开始和结束。这些元素可以用来包围不同部分的内容，使其以某种方式呈现或者工作。\n元素(Element)和属性(attribute)： 一个完整的HTML页面案例: 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;mywebsite\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p class=\u0026#34;nice\u0026#34;\u0026gt;hello world!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; 声明文档类型。\n\u0026lt;html\u0026gt;\u0026lt;/html\u0026gt; \u0026lt;html\u0026gt;元素，该元素是一个根元素，包裹了整个页面。\n\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;head\u0026gt;元素，该元素是一个容器，包含了你想包含在HTML页面但不想在HTML页面显示的内容。\n\u0026lt;meta charset=\u0026ldquo;utf-8\u0026rdquo;\u0026gt; \u0026lt;mata\u0026gt;元素的charset属性设置了文档使用的字符集。\n\u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;title\u0026gt;元素设置页面标题。浏览器在收藏页面的时候title的内容会做为书签的默认名称。\n\u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;body\u0026gt;元素包含你访问页面的所有可见内容。\n# 1.1.3 元数据 HTML中的\u0026lt;head\u0026gt;元素，他的内容不会在浏览器中显示，他的作用是保存页面中的一些元数据。\n包含在\u0026lt;head\u0026gt;中的一些元数据有\u0026lt;title\u0026gt;,\u0026lt;meta\u0026gt;,\u0026lt;link\u0026gt;等。\n\u0026lt;title\u0026gt;元素是一项元数据，用来表示整个页面的标题。 \u0026lt;title\u0026gt;here is tilte\u0026lt;/title\u0026gt;\n\u0026lt;meta\u0026gt;元素是一项元数据，用来描述数据的数据。 \u0026lt;meta charset=\u0026ldquo;utf-8\u0026rdquo;\u0026gt;\n\u0026lt;meta name=\u0026ldquo;author\u0026rdquo; content=\u0026ldquo;Chris Mills\u0026rdquo;\u0026gt;\n\u0026lt;meta name=\u0026ldquo;description\u0026rdquo; content=\u0026ldquo;The MDN Learning Area aims to provide complete beginners to the Web with all they need to know \u0026hellip;\u0026rdquo;\u0026gt;\n\u0026lt;meta property=\u0026ldquo;og:title\u0026rdquo; content=\u0026ldquo;Mozilla Developer Network\u0026rdquo;\u0026gt;\n\u0026lt;link\u0026gt;元素 \u0026lt;link rel=\u0026ldquo;shortcut icon\u0026rdquo; href=\u0026ldquo;favicon.ico\u0026rdquo; type=\u0026ldquo;image/x-icon\u0026rdquo;\u0026gt;\n\u0026lt;link rel=\u0026ldquo;shortcut icon\u0026rdquo; href=\u0026ldquo;https://developer.mozilla.org/static/img/favicon32.png\"\u0026gt;\nHTML中应用CSS和JAVASCRIPT \u0026lt;link rel=\u0026ldquo;stylesheet\u0026rdquo; href=\u0026ldquo;my-css-file.css\u0026rdquo;\u0026gt;\n\u0026lt;script src=\u0026ldquo;my-js-file.js\u0026rdquo;\u0026gt;\u0026lt;/script\u0026gt;\n为文档设定主语言 \u0026lt;html language=\u0026ldquo;zh-CN\u0026rdquo;\u0026gt;\n# 1.1.4 HTML文字基础 标题标签\n1 2 3 \u0026lt;h1\u0026gt;一级标题\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;二级标题\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;三级标题\u0026lt;/h3\u0026gt; 段落标签\n1 \u0026lt;p\u0026gt;hello world\u0026lt;/p\u0026gt; 斜体粗体下划线\n1 2 3 \u0026lt;i\u0026gt;斜体\u0026lt;/i\u0026gt; \u0026lt;b\u0026gt;粗体\u0026lt;/b\u0026gt; \u0026lt;u\u0026gt;下划线\u0026lt;/u\u0026gt; 列表\n1 2 3 4 5 6 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;豆浆\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;油条\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;豆汁\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;焦圈\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 1 2 3 4 5 6 \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;豆浆\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;油条\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;豆汁\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;焦圈\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; # 1.1.5 超链接 超链接是互联网提供的最令人兴奋的创新之一。\n通过将文本转换为\u0026lt;a\u0026gt;元素(锚元素)内的链接来创建基本链接。\n几个简单的超链接例子：\n1 2 3 4 5 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://example.com\u0026#34;\u0026gt;Website\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;mailto:m.bluth@example.com\u0026#34;\u0026gt;Email\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;tel:+123456789\u0026#34;\u0026gt;Phone\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; title属性：\n\u0026lt;a href=\u0026quot;https://example.com\u0026quot; title=\u0026quot;here is my website.\u0026quot;\u0026gt;Website\u0026lt;/a\u0026gt;\ntarget属性:\n\u0026lt;a href=\u0026quot;https://example.com\u0026quot; title=\u0026quot;here is my website.\u0026quot; target= \u0026quot;_blank\u0026quot;\u0026gt;Website\u0026lt;/a\u0026gt;\ndownload属性:\n1 2 3 4 \u0026lt;a href=\u0026#34;https://download.mozilla.org/?product=firefox-latest-ssl\u0026amp;os=win64\u0026amp;lang=zh-CN\u0026#34; download=\u0026#34;firefox-latest-64bit-installer.exe\u0026#34;\u0026gt; 下载最新的 Firefox 中文版 - Windows（64位） \u0026lt;/a\u0026gt; # 1.1.6 高级文字格式 描述列表(describtion list) 描述列表使用与其他列表类型不同的闭合标签 \u0026lt;dl\u0026gt;; 此外，每一项都用 \u0026lt;dt\u0026gt; (description term) 元素闭合。每个描述都用 \u0026lt;dd\u0026gt; (description description) 元素闭合。\n1 2 3 4 5 6 7 8 9 \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;培根\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;整个世界的粘合剂。\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;鸡蛋\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;一块蛋糕的粘合剂。\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;咖啡\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;一种浅棕色的饮料。\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;可以在清晨带来活力。\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; 引用(blockquote) 略缩语(abbr) 标记联系方式(address) 上标和下标(sup sub) 展示计算机代码(code pre var kbd samp) 标记时间(time) # 1.1.7 文档与网站构架 网站由若干html文档组成，每一个html文档包含若干的布局元素。\n页眉 \u0026lt;header\u0026gt; 导航栏 \u0026lt;nav\u0026gt; 主内容 \u0026lt;main\u0026gt; 侧边栏 \u0026lt;aside\u0026gt; 页脚 \u0026lt;footer\u0026gt; 无语义元素 \u0026lt;div\u0026gt; \u0026lt;span\u0026gt; # 1.1.8 HTML调试 firefox调试技术。\n# 1.2 多媒体 # 1.2.1 概述 # 1.2.2 图片 \u0026lt;img\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;img src=\u0026#34;images/dinosaur.jpg\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;images/dinosaur.jpg\u0026#34; alt=\u0026#34;一只恐龙头部和躯干的骨架，它有一个巨大的头，长着锋利的牙齿。\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;images/dinosaur.jpg\u0026#34; alt=\u0026#34;一只恐龙头部和躯干的骨架，它有一个巨大的头，长着锋利的牙齿。\u0026#34; width=\u0026#34;400\u0026#34; height=\u0026#34;341\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;images/dinosaur.jpg\u0026#34; alt=\u0026#34;一只恐龙头部和躯干的骨架，它有一个巨大的头，长着锋利的牙齿。\u0026#34; width=\u0026#34;400\u0026#34; height=\u0026#34;341\u0026#34; title=\u0026#34;曼彻斯特大学博物馆展出的一只霸王龙的化石。\u0026#34;\u0026gt; \u0026lt;img\u0026gt;搭配说明文字 1 2 3 4 5 6 7 \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;images/dinosaur.jpg\u0026#34; alt=\u0026#34;一只恐龙头部和躯干的骨架，它有一个巨大的头，长着锋利的牙齿。\u0026#34; width=\u0026#34;400\u0026#34; height=\u0026#34;341\u0026#34;\u0026gt; \u0026lt;figcaption\u0026gt;曼彻斯特大学博物馆展出的一只霸王龙的化石\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; CSS背景图片 1 2 3 p{ background-image: url(\u0026#34;images/dinosaur.jpg\u0026#34;); } # 1.2.3 音频 \u0026lt;audio\u0026gt; 1 2 3 4 5 \u0026lt;audio controls\u0026gt; \u0026lt;source src=\u0026#34;viper.mp3\u0026#34; type=\u0026#34;audio/mp3\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;viper.ogg\u0026#34; type=\u0026#34;audio/ogg\u0026#34;\u0026gt; \u0026lt;p\u0026gt;你的浏览器不支持 HTML5 音频，可点击\u0026lt;a href=\u0026#34;viper.mp3\u0026#34;\u0026gt;此链接\u0026lt;/a\u0026gt;收听。\u0026lt;/p\u0026gt; \u0026lt;/audio\u0026gt; # 1.2.4 视频 \u0026lt;video\u0026gt; 1 2 3 4 5 6 7 8 \u0026lt;video controls width=\u0026#34;400\u0026#34; height=\u0026#34;400\u0026#34; autoplay loop muted poster=\u0026#34;poster.png\u0026#34; preload=\u0026#34;auto\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;rabbit320.mp4\u0026#34; type=\u0026#34;video/mp4\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;rabbit320.webm\u0026#34; type=\u0026#34;video/webm\u0026#34;\u0026gt; \u0026lt;p\u0026gt;你的浏览器不支持 HTML5 视频。可点击\u0026lt;a href=\u0026#34;rabbit320.mp4\u0026#34;\u0026gt;此链接\u0026lt;/a\u0026gt;观看\u0026lt;/p\u0026gt; \u0026lt;/video\u0026gt; # 1.2.5 嵌入 \u0026lt;iframe\u0026gt; 1 2 3 4 5 6 7 8 \u0026lt;iframe src=\u0026#34;https://player.bilibili.com/player.html?aid=19390801\u0026amp;cid=31621681\u0026amp;page=1\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; \u0026lt;p\u0026gt;改革春风吹满地\u0026lt;/p\u0026gt; \u0026lt;embed\u0026gt; 1 2 3 4 5 \u0026lt;embed src=\u0026#34;whoosh.swf\u0026#34; quality=\u0026#34;medium\u0026#34; bgcolor=\u0026#34;#ffffff\u0026#34; width=\u0026#34;550\u0026#34; height=\u0026#34;400\u0026#34; name=\u0026#34;whoosh\u0026#34; align=\u0026#34;middle\u0026#34; allowScriptAccess=\u0026#34;sameDomain\u0026#34; allowFullScreen=\u0026#34;false\u0026#34; type=\u0026#34;application/x-shockwave-flash\u0026#34; pluginspage=\u0026#34;http://www.macromedia.com/go/getflashplayer\u0026#34;\u0026gt; \u0026lt;object\u0026gt; 1 2 3 4 \u0026lt;object data=\u0026#34;mypdf.pdf\u0026#34; type=\u0026#34;application/pdf\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;1200\u0026#34; typemustmatch\u0026gt; \u0026lt;p\u0026gt;You don\u0026#39;t have a PDF plugin, but you can \u0026lt;a href=\u0026#34;myfile.pdf\u0026#34;\u0026gt;download the PDF file.\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/object\u0026gt; # 1.2.6 矢量图 在网上，你会和两种类型的图片打交道-位图和矢量图。\n位图使用像素网络来定义 一个位图文件精确包含每一个像素的位置和色彩信息，流行的格式有bitmap，png，jepg，gif等。\n矢量图使用算法来定义 一个矢量图文件包含了图形和路径的定义，计算机根据定义计算出当它们在屏幕上渲染时呈现的样子，SVG格式可以让我们创造用于web的矢量图形。\n\u0026lt;svg\u0026gt; 1 2 3 4 5 6 7 \u0026lt;svg version=\u0026#34;1.1\u0026#34; baseProfile=\u0026#34;full\u0026#34; width=\u0026#34;300\u0026#34; height=\u0026#34;200\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;rect width=\u0026#34;100%\u0026#34; height=\u0026#34;100%\u0026#34; fill=\u0026#34;black\u0026#34; /\u0026gt; \u0026lt;circle cx=\u0026#34;150\u0026#34; cy=\u0026#34;100\u0026#34; r=\u0026#34;90\u0026#34; fill=\u0026#34;blue\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; 1 2 3 4 5 6 7 8 9 \u0026lt;svg width=\u0026#34;100%\u0026#34; height=\u0026#34;100%\u0026#34;\u0026gt; \u0026lt;rect width=\u0026#34;100%\u0026#34; height=\u0026#34;100%\u0026#34; fill=\u0026#34;red\u0026#34; /\u0026gt; \u0026lt;circle cx=\u0026#34;100%\u0026#34; cy=\u0026#34;100%\u0026#34; r=\u0026#34;150\u0026#34; fill=\u0026#34;blue\u0026#34; stroke=\u0026#34;black\u0026#34; /\u0026gt; \u0026lt;polygon points=\u0026#34;120,0 240,225 0,225\u0026#34; fill=\u0026#34;green\u0026#34;/\u0026gt; \u0026lt;text x=\u0026#34;50\u0026#34; y=\u0026#34;100\u0026#34; font-family=\u0026#34;Verdana\u0026#34; font-size=\u0026#34;55\u0026#34; fill=\u0026#34;white\u0026#34; stroke=\u0026#34;black\u0026#34; stroke-width=\u0026#34;2\u0026#34;\u0026gt; Hello! \u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; # 1.2.7 图片自适应 1 2 3 4 5 6 7 \u0026lt;img srcset=\u0026#34;elva-fairy-320w.jpg 320w, elva-fairy-480w.jpg 480w, elva-fairy-800w.jpg 800w\u0026#34; sizes=\u0026#34;(max-width: 320px) 280px, (max-width: 480px) 440px, 800px\u0026#34; src=\u0026#34;elva-fairy-800w.jpg\u0026#34; alt=\u0026#34;Elva dressed as a fairy\u0026#34;\u0026gt; 查看设备宽度 检查sizes列表中那个媒体条件为真 查看给与该媒体查询的槽大小 加载srcset列表中引用的最接近所选槽大小的图像 # 1.3 表格 # 1.3.1 表格概述 # 1.3.2 基础表格 \u0026lt;table\u0026gt;\n\u0026lt;tr\u0026gt; table row\n\u0026lt;th\u0026gt; table header\n\u0026lt;td\u0026gt; table data\n\u0026lt;colspan\u0026gt; \u0026lt;rowspan\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 \u0026lt;table\u0026gt; \u0026lt;colgroup\u0026gt; \u0026lt;col span=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;col style=\u0026#34;background-color:#97DB9A;\u0026#34;\u0026gt; \u0026lt;col style=\u0026#34;width:42px;\u0026#34;\u0026gt; \u0026lt;col style=\u0026#34;background-color:#97DB9A;\u0026#34;\u0026gt; \u0026lt;col style=\u0026#34;background-color:#DCC48E; border:4px solid #C1437A;\u0026#34;\u0026gt; \u0026lt;col span=\u0026#34;2\u0026#34; style=\u0026#34;width:42px;\u0026#34;\u0026gt; \u0026lt;/colgroup\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;th\u0026gt;Mon\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Tues\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Wed\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Thurs\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Fri\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Sat\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Sun\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;1st period\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;English\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;German\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Dutch\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;2nd period\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;English\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;English\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;German\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Dutch\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;3rd period\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;German\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;German\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Dutch\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;4th period\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;English\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;English\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Dutch\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; # 1.3.3 高级表格 \u0026lt;caption\u0026gt; 1 2 3 \u0026lt;table\u0026gt; \u0026lt;caption\u0026gt;Florence\u0026#39;s weekly lesson timetable\u0026lt;/caption\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;col\u0026gt;\n\u0026lt;colgroup\u0026gt;\n\u0026lt;thead\u0026gt;\n\u0026lt;tfoot\u0026gt;\n\u0026lt;tbody\u0026gt;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;table\u0026gt; \u0026lt;caption\u0026gt;How I chose to spend my money\u0026lt;/caption\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Purchase\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Location\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Date\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Evaluation\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Cost (€)\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;4\u0026#34;\u0026gt;SUM\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;118\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tfoot\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Haircut\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Hairdresser\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;12/09\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Great idea\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;30\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Lasagna\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Restaurant\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;12/09\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Regrets\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;18\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Shoes\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Shoeshop\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;13/09\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Big regrets\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;65\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Toothpaste\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Supermarket\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;13/09\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Good\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;5\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;scope\u0026gt; 1 2 3 4 5 6 7 8 9 \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Purchase\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Location\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Date\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Evaluation\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Cost (€)\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;id\u0026gt;和\u0026lt;headers\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th id=\u0026#34;purchase\u0026#34;\u0026gt;Purchase\u0026lt;/th\u0026gt; \u0026lt;th id=\u0026#34;location\u0026#34;\u0026gt;Location\u0026lt;/th\u0026gt; \u0026lt;th id=\u0026#34;date\u0026#34;\u0026gt;Date\u0026lt;/th\u0026gt; \u0026lt;th id=\u0026#34;evaluation\u0026#34;\u0026gt;Evaluation\u0026lt;/th\u0026gt; \u0026lt;th id=\u0026#34;cost\u0026#34;\u0026gt;Cost (€)\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th id=\u0026#34;haircut\u0026#34;\u0026gt;Haircut\u0026lt;/th\u0026gt; \u0026lt;td headers=\u0026#34;location haircut\u0026#34;\u0026gt;Hairdresser\u0026lt;/td\u0026gt; \u0026lt;td headers=\u0026#34;date haircut\u0026#34;\u0026gt;12/09\u0026lt;/td\u0026gt; \u0026lt;td headers=\u0026#34;evaluation haircut\u0026#34;\u0026gt;Great idea\u0026lt;/td\u0026gt; \u0026lt;td headers=\u0026#34;cost haircut\u0026#34;\u0026gt;30\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; ... \u0026lt;/tbody\u0026gt; ","date":"2021-05-30T20:22:15+08:00","permalink":"https://tsinling.org/p/mdn-html/","title":"Mdn Html"},{"content":" # stun unreachable 最近的freesiwtch stun server stun.freeswitch.org因不明原因不可达。 默认的stun.freeswitch.org是指向第三方的stun server的。stun.freeswitch.org指向stun.signalwire.com，很有可能freeswitch team自举了stunserver，丢弃了外部的stun请求。 这样造成了采取默认配置的freeswitch启动的时候失败(mod_sofia获取不到external ip)。\n可以调整配置中默认的stun地址解决，也可以配置sofia的external ip地址来解决。\n以上源自FS-11604: [Configuration] Improve Vanilla config所造成。\n# 公共的stun stun.xten.com\nstun.sipgate.net\n\u0026hellip;\n在启动freeswitch后可以用过stun命令尝试更多的public stun server。\n1 2 3 4 5 6 7 freeswitch@debian10\u0026gt; stun stun.xten.com x.85.239.46:22427 freeswitch@debian10\u0026gt; stun stun.sipgate.net x.85.239.46:22429 freeswitch@debian10\u0026gt; # 修改vars.xml 1 2 3 \u0026lt;X-PRE-PROCESS cmd=\u0026#34;set\u0026#34; data=\u0026#34;local_ip_v4=x.x.x.x\u0026#34;/\u0026gt; \u0026lt;X-PRE-PROCESS cmd=\u0026#34;stun-set\u0026#34; data=\u0026#34;external_sip_ip=auto-nat\u0026#34;/\u0026gt; \u0026lt;X-PRE-PROCESS cmd=\u0026#34;stun-set\u0026#34; data=\u0026#34;external_rtp_ip=auto-nat\u0026#34;/\u0026gt; # maillist 在邮件列表里的讨论后，stun.freeswitch.org在不被滥用的前提下暂时恢复\u0026hellip;\n1 2 3 4 5 6 7 [Freeswitch-users] Replace stun.freeswitch.org in default configuration since it\u0026#39;s gone. They are responding, but it\u0026#39;s literally only there as a quick start, and is currently being abused to a level that is off the charts. If your company depends on our stun servers, make your own. I have two servers in rotation and they both get 500-1000 requests per second. from brian(brian@freeswitch.com) 2020/11/10 7:22 ","date":"2020-10-31T09:49:45+08:00","permalink":"https://tsinling.org/p/freeswitch-stunserver/","title":"Freeswitch Stunserver"},{"content":" # hugo hugo 在windows X64平台支持Sass/SCCS。\n# 快捷安装 最快捷的方法就是去tag下载二进制文件了，hugo with extended。\n# 编译安装 可以参考hugo的Readme.md。\n在编译之前需要CGO支持，windowsx64下CGO需要用到 MinGW-W64 GCC-8.1.0。访问 https://sourceforge.net/projects/mingw-w64/files 找需要的mingw win64版本。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 go version go version go1.15.2 windows/amd64 git clone https://github.com/gohugoio/hugo.git cd hugo go install --tags extended ... Error: export ordinal too large: 78124 go install -a -x -tags extended ... c:\\go\\pkg\\tool\\windows_amd64\\link.exe: running g++ failed: exit status 1 ../x86_64-w64-mingw32/bin/ld.exe: Error: export ordinal too large: 78124 collect2.exe: error: ld returned 1 exit status go install -a -x -v -buildmode=exe -tags extended ... cp $WORK\\b001\\exe\\a.out.exe C:\\Users\\bob\\go\\bin\\hugo.exe 编译的时候报告Error: export ordinal too large: 78124，参考 https://github.com/golang/go/issues/40795 需要加上-buildmode=exe，具体原因需要等待golang官方调查\u0026hellip;\n该问题已经在go1.16版本修复.\n# ldflags 默认编译的文件比较大，可以使用-ldflags \u0026ldquo;-w -s\u0026quot;去掉调试信息。\n1 go install -v -ldflags \u0026#34;-w -s\u0026#34; -tags extended 需要全编译加上 -a即可。\n1 go install -a -x -v -ldflags \u0026#34;-w -s\u0026#34; -tags extended ","date":"2020-09-22T13:27:37+08:00","permalink":"https://tsinling.org/p/install-hugo-with-extended/","title":"Install Hugo With Extended"},{"content":" # IOS14 自从IOS 14发布后，很多人都去体验IOS 14 新特性。\n# OTA升级 根据官方建议https://support.apple.com/zh-cn/ios/update\nIphone-\u0026gt;设置-\u0026gt;通用-\u0026gt;软件更新 我也尝试升级到了IOS14，总体效果还是值得赞赏的。听了一下午网易云音乐，后盖烫的厉害，尝试DFU恢复一下看看。\n# iTunes 手机自身无法更新或恢复的时候，借助Itunes来恢复，参考用Itunes来恢复。\n# recovery模式 recovery模式是apple官方给出的刷机方式，进入恢复模式后屏幕显示笔记本和一根线缆。\n操作步骤如下：\n连接iphone到计算机usb 在计算机中运行Itunes（Itunes版本最新） 按下调高音量按钮再快速松开。按下调低音量按钮再快速松开。按住开机按钮，直到屏幕变黑开始重新启动。 继续按住开机按钮，直到设备进入恢复模式。(适用iphone8以上版) Itunes弹出“iphone出现问题需要更新或恢复”，点恢复下载ios14.ispw恢复Iphone。 # dfu模式 Device firmware Upgrade mode，进入dft模式后屏幕显示黑色。\n操作步骤如下：\n连接iPhone到计算机usb 在计算机中运行iTunes 按下音量调高按钮再快速松开。按下音量调低按钮再快速松开。按住开机按钮，直到屏幕变黑开始重新启动。 按住开机按钮和量调低按钮，几秒钟后松开开机按钮，再过几秒钟松开音量调低按钮，进入dfu模式。 Itunes弹出“iphone出现问题需要更新或恢复”，点恢复下载ios14.ispw恢复Iphone。 ","date":"2020-09-20T16:10:22+08:00","permalink":"https://tsinling.org/p/iphone-restore/","title":"Iphone Restore"},{"content":"hugo image.\n","date":"2020-05-23T20:44:37+08:00","image":"https://tsinling.org/p/hugo-image/hugo-image_hu4a460d1043a8af2768967b239e4a89b5_17970_120x120_fill_q75_box_smart1.jpg","permalink":"https://tsinling.org/p/hugo-image/","title":"Hugo Image"}]